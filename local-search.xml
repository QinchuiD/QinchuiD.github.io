<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>c++类与对象</title>
    <link href="/2025/07/15/c++%E7%B1%BB%E4%B8%8E%E5%AF%B9%E8%B1%A1/"/>
    <url>/2025/07/15/c++%E7%B1%BB%E4%B8%8E%E5%AF%B9%E8%B1%A1/</url>
    
    <content type="html"><![CDATA[<p>面向对象的三大特性：封装，继承，多态<br>具有相同性质的对象，抽象为一个类。例如狗属于狗类</p><h2 id="封装："><a href="#封装：" class="headerlink" title="封装："></a>封装：</h2><ol><li>将属性和行为作为一个整体，表现生活中的事物</li><li>属性和行为加以权限控制</li></ol><h3 id="为什么要封装？"><a href="#为什么要封装？" class="headerlink" title="为什么要封装？"></a>为什么要封装？</h3><ol><li>设计类的时候，可以将属性和行为写在一起<br>类的定义：</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Circle</span> &#123;  <br>    (权限)<span class="hljs-keyword">public</span>:  <br>    (属性)<span class="hljs-type">int</span> radius;  <br>    (行为)<span class="hljs-type">double</span> cal &#123;  <br>        <span class="hljs-keyword">return</span> radius * radius* <span class="hljs-number">3.14159</span>;  <br>    &#125;  <br>&#125;;<br></code></pre></td></tr></table></figure><ol start="2"><li>设计类时，可以把属性和行为放在不同权限下控制：<br>三种权限分别为：<br>公共权限public:类内可访问，类外可访问     <br>保护protected:类内可，类外不可<br>私有private:类内可，类外不可</li></ol><hr><h3 id="struct和class的区别："><a href="#struct和class的区别：" class="headerlink" title="struct和class的区别："></a>struct和class的区别：</h3><p>struct默认为公共权限，class默认为私有权限。</p><hr><p>既然私有权限在类外不能访问，那么这种权限设置有什么好处呢？<br>通过行为的设置，可以实现对属性的只读&#x2F;写</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Stu</span> &#123;  <br><span class="hljs-keyword">private</span>:  <br>    string name;  <br>    string id;  <br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">read</span><span class="hljs-params">()</span> </span>&#123;  <br>        cout&lt;&lt;<span class="hljs-string">&quot;名字是:&quot;</span>&lt;&lt;name&lt;&lt;<span class="hljs-string">&quot;学号为:&quot;</span>&lt;&lt;id&lt;&lt;endl;  <br>    &#125;  <br><span class="hljs-keyword">public</span>:  <br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">write</span><span class="hljs-params">(string str)</span> </span>&#123;  <br>        name = str;  <br>    &#125;  <br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">showname</span><span class="hljs-params">()</span> </span>&#123;  <br>        cout&lt;&lt;<span class="hljs-string">&quot;名为:&quot;</span>&lt;&lt;name&lt;&lt;endl;  <br>    &#125;  <br>&#125;;<br></code></pre></td></tr></table></figure><p>如上，可以通过设为公共权限的行为，对类的属性进行可读或可写的操作，那为什么不直接都设为公共权限再设置呢？    假设我们将属性定为了一个不可能取得的数据，例如年龄设为200，显然是不可能的，就可以在类内进行数据检查及时反馈，防止传入无效的数据。    </p><hr><h2 id="对象的初始化和清理："><a href="#对象的初始化和清理：" class="headerlink" title="对象的初始化和清理："></a>对象的初始化和清理：</h2><p>如果不对对象设置初始状态，使用后果是未知的；使用后不进行清理，也有安全问题。<br>c++中存在构造函数和析构函数，这两个函数回被自动调用，完成初始化和清理，如果不提供，会调用编译器提供好的函数，是空实现。（所以这一过程是必然进行的）</p><ul><li>构造函数：<br>没用返回值    函数名与类名相同<br>构造函数可以有参数    自动调用一次    </li><li>析构函数：<br>无返回值   函数名为～类名<br>不可有参数  自动调用</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span><br>&#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-built_in">Person</span>()<br>&#123;<br>cout&lt;&lt;<span class="hljs-string">&quot;Person构造函数的调用&quot;</span>&lt;&lt;endl；<br>&#125;<br>～<span class="hljs-built_in">Person</span>()<br>&#123;<br>cout&lt;&lt;<span class="hljs-string">&quot;Person的析构函数调用&quot;</span>&lt;&lt;endl;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><hr><h2 id="构造函数的分类及调用"><a href="#构造函数的分类及调用" class="headerlink" title="构造函数的分类及调用"></a>构造函数的分类及调用</h2><p>按照参数分为无参函数和有参函数<br>按照类型分为普通构造和拷贝构造    </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span>  <br>&#123;  <br><span class="hljs-keyword">public</span>:  <br>    <span class="hljs-built_in">Person</span>()  <br>    &#123;  <br>        cout&lt;&lt;<span class="hljs-string">&quot;Person构造函数的调用&quot;</span>&lt;&lt;endl;  <br>    &#125;  <br>    <span class="hljs-built_in">Person</span>(string str) &#123;  <br>        name = str;  <br>        cout&lt;&lt;<span class="hljs-string">&quot;Person构造函数的调用&quot;</span>&lt;&lt;name&lt;&lt;endl;  <br>    &#125;  <br>    <span class="hljs-built_in">Person</span>(Person &amp;p) &#123;  <br>        name = p.name;  <br>        cout&lt;&lt;<span class="hljs-string">&quot;Person构造函数的调用&quot;</span>&lt;&lt;name&lt;&lt;endl;  <br>    &#125;  <br>    ~<span class="hljs-built_in">Person</span>()  <br>    &#123;  <br>        cout&lt;&lt;<span class="hljs-string">&quot;Person构造函数的调用&quot;</span>&lt;&lt;endl;  <br>    &#125;  <br>    string name;  <br>&#125;;```<br>调用：    <br>```c++<br>括号法：<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">display</span><span class="hljs-params">()</span> </span>&#123;  <br>    Person p1;  <br>    <span class="hljs-function">Person <span class="hljs-title">p2</span><span class="hljs-params">(<span class="hljs-string">&quot;sylvia&quot;</span>)</span></span>;  <br>    <span class="hljs-function">Person <span class="hljs-title">p3</span><span class="hljs-params">(p2)</span></span>;  <br>&#125;  <br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;  <br>    <span class="hljs-built_in">display</span>();  <br>&#125;<br></code></pre></td></tr></table></figure><p><img src="C:/test/blog/themes/fluid/source/img/load.png" alt="运行结果"><br>注意：当对象作为参数传入函数或者作为函数返回值时，会调用拷贝构造函数    </p><hr><h2 id="构造函数调用规则"><a href="#构造函数调用规则" class="headerlink" title="构造函数调用规则"></a>构造函数调用规则</h2><p>c++会提供默认构造函数，析构参数，拷贝构造函数<br>如果提供有参构造函数，不提供无参构造；如果定义拷贝构造函数，不提供任何构造函数。<br>注意：如果没有构造函数程序不能运行  </p><hr><h2 id="深拷贝与浅拷贝"><a href="#深拷贝与浅拷贝" class="headerlink" title="深拷贝与浅拷贝"></a>深拷贝与浅拷贝</h2><p>浅拷贝☞在拷贝构造时简单的数值拷贝，当属性中包含指针时，两个对象的属性指向是相同的，在析构时，同一片地址会被释放两次，造成错误，这时就需要深拷贝，自行创造一个新空间来存储。</p><h2 id="初始化列表"><a href="#初始化列表" class="headerlink" title="初始化列表"></a>初始化列表</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-keyword">class</span> <span class="hljs-title">Person</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">int</span> a,b,c;<br><span class="hljs-built_in">Person</span>(): <span class="hljs-built_in">a</span>(<span class="hljs-number">10</span>),<span class="hljs-built_in">b</span>(<span class="hljs-number">20</span>),<span class="hljs-built_in">c</span>(<span class="hljs-number">30</span>)<br>&#123;&#125;<br><span class="hljs-built_in">Person</span>(<span class="hljs-type">int</span> a,<span class="hljs-type">int</span> b,<span class="hljs-type">int</span> c)<span class="hljs-built_in">a</span>(a),<span class="hljs-built_in">b</span>(b),<span class="hljs-built_in">c</span>(c)<br>&#123;&#125;<br></code></pre></td></tr></table></figure><hr><h2 id="类对象作为类成员"><a href="#类对象作为类成员" class="headerlink" title="类对象作为类成员"></a>类对象作为类成员</h2><p>例如人作为一类，所持有的手机作为一个属性，而手机也是一个类，有不同型号，所以手机作为类对象，可以作为人类的类成员：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Phone</span> &#123;  <br>    <span class="hljs-keyword">public</span>:  <br>    string name;  <br>    <span class="hljs-built_in">Phone</span>(string str) &#123;  <br>        name=str;  <br>        cout&lt;&lt;<span class="hljs-string">&quot;Phone构造函数&quot;</span>&lt;&lt;endl;  <br>    &#125;  <br>    ~<span class="hljs-built_in">Phone</span>() &#123;  <br>        cout&lt;&lt;<span class="hljs-string">&quot;Phone&lt;UNK&gt;&quot;</span>&lt;&lt;endl;  <br>    &#125;  <br>&#125;;  <br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> &#123;  <br>    <span class="hljs-keyword">public</span>:  <br>    Phone a;  <br>    <span class="hljs-type">int</span> age;  <br>    <span class="hljs-built_in">Person</span>(string str,<span class="hljs-type">int</span> a):<span class="hljs-built_in">a</span>(str),<span class="hljs-built_in">age</span>(a) &#123;  <br>        cout&lt;&lt;<span class="hljs-string">&quot;Person构造函数&quot;</span>&lt;&lt;endl;  <br>    &#125;  <br>    ~<span class="hljs-built_in">Person</span>() &#123;  <br>        cout&lt;&lt;<span class="hljs-string">&quot;Person&lt;UNK&gt;&quot;</span>&lt;&lt;endl;  <br>    &#125;  <br>&#125;;<br></code></pre></td></tr></table></figure><p>注意，这里的运行结果中，Phone构造函数会第一个打印， 可知，会优先构造成员类，在构造对象类。   </p><hr><h2 id="静态成员"><a href="#静态成员" class="headerlink" title="静态成员"></a>静态成员</h2><p>静态成员是在成员变量前加上static，有以下特点：</p><ol><li>所有对象共享同一个数据</li><li>编译阶段分配内存</li><li>类内声明，类外初始化<br>同时，因为所有对象都共享同一份数据，所以也可以直接用类名来访问到静态成员。</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> &#123;  <br>    <span class="hljs-keyword">public</span>:  <br>    <span class="hljs-type">static</span> <span class="hljs-type">int</span> a; <span class="hljs-comment">//声明 </span><br>&#125;;  <br><span class="hljs-type">int</span> Person::a=<span class="hljs-number">10</span>;  <span class="hljs-comment">//初始化</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test</span><span class="hljs-params">()</span> </span>&#123;  <br>    Person x;  <br>    cout &lt;&lt; x.a &lt;&lt; endl;  <br>    Person y;  <br>    y.a=<span class="hljs-number">20</span>;  <br>    cout &lt;&lt; x.a &lt;&lt; endl; <br>    cout &lt;&lt;Person::a&lt;&lt;endl; <br>&#125;<br></code></pre></td></tr></table></figure><h2 id="静态成员函数："><a href="#静态成员函数：" class="headerlink" title="静态成员函数："></a>静态成员函数：</h2><p>与静态成员相似，静态成员函数可以被所有对象访问，也可以通过类名直接访问    </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c++"><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> &#123;  <br>    <span class="hljs-keyword">public</span>:  <br>    <span class="hljs-function"><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title">func</span><span class="hljs-params">()</span></span><br><span class="hljs-function">    </span>&#123;<br>    cout&lt;&lt;<span class="hljs-string">&quot;静态成员函数调用&quot;</span>&lt;&lt;endl;<br>    &#125;<br>&#125;;  <br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test</span><span class="hljs-params">()</span> </span>&#123;  <br>    Person x;  <br>    x.<span class="hljs-built_in">func</span>();<br>    Person::<span class="hljs-built_in">func</span>();  <br>&#125;<br></code></pre></td></tr></table></figure><p>此外，静态成员函数只能访问静态成员变量，不能访问非静态成员变量。因为每个对象都可以调用静态成员函数，假设静态成员函数中要访问某个非静态成员，那就不能判断这个成员属于哪个对象。</p><hr><p>在一个类中，成员变量和成员函数是分开存储的，对于每个对象，都有一块内存去存储他的非静态成员变量，而成员函数则是只存储一份，所以当用sizeof计算某个对象的大小时，只会计算非静态成员变量的大小，那么成员函数只有一份，不同对象调用时是怎么分开的呢？</p><h2 id="this指针："><a href="#this指针：" class="headerlink" title="this指针："></a>this指针：</h2><p>this指针指向调用成员函数的对象，不需定义，直接使用<br>用途：    </p><ol><li>当形参与实参名字相同时。可以用this指针指向实参进行区分    </li><li>返回对象本身</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> &#123;  <br>    <span class="hljs-keyword">public</span>:  <br>    <span class="hljs-type">int</span> age;  <br>    <span class="hljs-built_in">Person</span>(<span class="hljs-type">int</span> age) &#123;  <br>        <span class="hljs-keyword">this</span>-&gt;age=age;  <br>    &#125;  <br>    <span class="hljs-function">Person&amp; <span class="hljs-title">process</span><span class="hljs-params">(Person&amp; p)</span> <span class="hljs-comment">//注意是Person&amp;&#123;  </span></span><br><span class="hljs-function">        <span class="hljs-keyword">this</span>-&gt;age+</span>=p.age;  <br>        <span class="hljs-keyword">return</span> *<span class="hljs-keyword">this</span>;  <br>    &#125;  <br>&#125;;  <br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;  <br>    <span class="hljs-function">Person <span class="hljs-title">p</span><span class="hljs-params">(<span class="hljs-number">10</span>)</span></span>;  <br>    <span class="hljs-function">Person <span class="hljs-title">q</span><span class="hljs-params">(<span class="hljs-number">20</span>)</span></span>;  <br>    q.<span class="hljs-built_in">process</span>(p);  <br>    cout &lt;&lt; q.age &lt;&lt; <span class="hljs-string">&quot;\n&quot;</span>;  <br>&#125;<br></code></pre></td></tr></table></figure><p>this指针也可能是空指针，所以在使用前最好要判断一下。<br>对象的this指针为指针常量，其指向是不可改变的，（Person * const this），但其指向的值是可以改变的    如果想要设为不可改变</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-type">int</span> a；<br><span class="hljs-keyword">mutable</span> <span class="hljs-type">int</span> b;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">showPerson</span><span class="hljs-params">()</span> <span class="hljs-type">const</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">this</span>-&gt;a=<span class="hljs-number">100</span><span class="hljs-comment">//这就是错误的</span><br><span class="hljs-comment">//有了mutable即便如此也可以更改</span><br>&#125;<br></code></pre></td></tr></table></figure><p>常函数：</p><ol><li>成员函数后+const后称为常函数</li><li>常函数内不可修改成员属性</li><li>属性+mutable仍然可以修改<br>常对象：</li><li>声明对象前+const称为常对象</li><li>常对象只能调用常函数</li></ol>]]></content>
    
    
    <categories>
      
      <category>c++</category>
      
    </categories>
    
    
    <tags>
      
      <tag>cs</tag>
      
      <tag>c++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Lecture 7 - Lists IV Arrays and Lists （链表总结）</title>
    <link href="/2025/05/29/Lecture%207/"/>
    <url>/2025/05/29/Lecture%207/</url>
    
    <content type="html"><![CDATA[<p>因为前面所创建的链表，也有一些问题，比如，在一个很大的链表中，我们想要找到中间项，无论从哪个方向入手，都是很麻烦的。而数组就很好的解决了这个问题，所以我们就通过创建数组来改善这个问题。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Array</span> &#123;  <br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span>[] array;  <br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> size;  <br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Array</span><span class="hljs-params">()</span>  <br>    &#123;  <br>        array = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">100</span>];  <br>        size=<span class="hljs-number">0</span>;  <br>    &#125;<br></code></pre></td></tr></table></figure><p>通过size来确定目前数组的长度，并进行一系列操作</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addlast</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span>  <br>    &#123;  <br>        <span class="hljs-keyword">if</span>(size&gt;=array.length)  <br>        &#123;  <br>            resize(array.length*<span class="hljs-number">2</span>);  <br>        &#125;  <br>        array[size]=n;  <br>        size++;  <br>    &#125;<span class="hljs-comment">//添加末尾项  </span><br><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">get</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>  <br>&#123;  <br>    <span class="hljs-keyword">return</span> array[i-<span class="hljs-number">1</span>];  <br>&#125;<span class="hljs-comment">//得到目标项  </span><br><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getlast</span><span class="hljs-params">()</span>  <br>&#123;  <br>    <span class="hljs-keyword">return</span> array[size-<span class="hljs-number">1</span>];  <br>&#125;<span class="hljs-comment">//得到末尾项  </span><br><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">removelast</span><span class="hljs-params">()</span>  <br>&#123;  <br>    <span class="hljs-type">int</span> temp=array[size-<span class="hljs-number">1</span>];  <br>    size--;  <br>    <span class="hljs-keyword">return</span> temp;  <br>&#125;<span class="hljs-comment">//去掉末尾项</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">resize</span><span class="hljs-params">(<span class="hljs-type">int</span> newSize)</span>  <br>&#123;  <br>    <span class="hljs-type">int</span>[] a = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[newSize];  <br>    System.arraycopy(array, <span class="hljs-number">0</span>, a, <span class="hljs-number">0</span>, array.length);  <br>    array=a;  <br>&#125;<span class="hljs-comment">//重新设置数组长度</span><br></code></pre></td></tr></table></figure><p>因为数组长度是固定的，一旦超过设定的初值，就不能再添加，所以采取的策略是设置一个更长的新数组（一般设置为旧数组长度两倍），将原有数据都复制过去，存储原数组地址变量也赋值为新数组地址。当然，这一步随数组长度增加是越来越慢的，所以这也是数组的一个缺点。</p><h2 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h2><p>共七次课，讲了链表与数组的构造以及相应的操作。这两种数据结构都是线性的存储结构，而存储方式也有不同。<br>数组就像是一栋大公寓，里面每一间屋子住着相应的数据，知道门牌号，就能迅速的找到屋里的人，带来的问题就是公寓住满后再想住人就相对困难，只能换大楼，再让原住民集体搬家。同时，想要对数组中间位置进行插入和删除比较麻烦，需要对后续所有项都操作，费时费力。<br>而链表存储的数据，仅相邻元素间存在关系，这种整体弱相关性就让链表对于中间位置的数据操作变得清晰简单，同时长度也可以随时变化。但带来的问题就是无法直接获得目标数据，需要一步一步找到，费时。</p>]]></content>
    
    
    <categories>
      
      <category>数据结构与算法</category>
      
      <category>CS61B</category>
      
    </categories>
    
    
    <tags>
      
      <tag>cs</tag>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Lecture 5-Lists 3 DLLists and Arrays</title>
    <link href="/2025/05/29/Lecture%205/"/>
    <url>/2025/05/29/Lecture%205/</url>
    
    <content type="html"><![CDATA[<p>观察上节课所写的单向链表结构，发现要得到最后一个结点需要遍历整个链表，这是很麻烦的，所以我们想要再建立一个类似头指针一样指向末尾的指针，帮助我们从末尾开始遍历。<br>这时我们发现，即便有了这个指针，他只能帮助我们得到最后一个结点，是不能向前访问的，所以我们就通过创建双向链表来解决。让每一个结点不仅存储下一个结点的位置，还保存上一个结点的位置。<br>这时，我们就能通过最后一个结点的指针来进行一系列操作。但是，就面临了设置头结点时相同的问题，假如链表是空的，还需要先判断再操作。这时候我们就有两种方法解决这个问题：</p><ol><li>建立两个哨兵，一个在最前方，一个在最后方。</li><li>只用一个哨兵，后面连接第一个结点，前面连接最后一个结点。（如果是空链表，前后都指向自己）<br>给出第二种链表的构造方式：</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">array</span> &#123;  <br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> size=<span class="hljs-number">1</span>;  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">IntNode</span>  <br>    &#123;  <br>        <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> item;  <br>        <span class="hljs-keyword">public</span> IntNode next;  <br>        <span class="hljs-keyword">public</span> IntNode prev;  <br>        <span class="hljs-keyword">public</span> <span class="hljs-title function_">IntNode</span><span class="hljs-params">(<span class="hljs-type">int</span> i, IntNode n, IntNode p)</span>  <br>        &#123;  <br>            item = i;  <br>            next = n;  <br>            prev = p;  <br>        &#125;  <br>    &#125;  <br>    <span class="hljs-keyword">public</span> IntNode first;  <br>    <span class="hljs-keyword">private</span> IntNode sentinel=<span class="hljs-keyword">new</span> <span class="hljs-title class_">IntNode</span>(<span class="hljs-number">0</span>,<span class="hljs-literal">null</span>,<span class="hljs-literal">null</span>);  <br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">array</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span>  <br>    &#123;  <br>        sentinel.next = <span class="hljs-keyword">new</span> <span class="hljs-title class_">IntNode</span>(n, <span class="hljs-literal">null</span>, sentinel);  <br>        sentinel.prev = sentinel.next;  <br>    &#125;  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span>  <span class="hljs-title function_">addarray</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span>  <br>    &#123;  <br>        IntNode n=<span class="hljs-keyword">new</span> <span class="hljs-title class_">IntNode</span>(x,sentinel.next,sentinel);  <br>        sentinel.next.prev = n;  <br>        sentinel.next = n;  <br>        size++;  <br>    &#125;  <br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getfirst</span><span class="hljs-params">()</span>  <br>    &#123;  <br>    <span class="hljs-keyword">return</span> sentinel.next.item;  <br>    &#125;  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addarraylast</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span>  <br>    &#123;  <br>        IntNode n=<span class="hljs-keyword">new</span> <span class="hljs-title class_">IntNode</span>(x,<span class="hljs-literal">null</span>,sentinel.prev);  <br>        sentinel.prev.next = n;  <br>        sentinel.prev = n;  <br>        size++;  <br>  <br>    &#125;  <br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-title function_">size</span><span class="hljs-params">(IntNode p)</span>  <br>    &#123;  <br>        <span class="hljs-type">int</span> <span class="hljs-variable">size</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;  <br>        <span class="hljs-type">IntNode</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> sentinel.next;  <br>        <span class="hljs-keyword">while</span>(temp != <span class="hljs-literal">null</span>)  <br>        &#123;  <br>            temp = temp.next;  <br>            size++;  <br>        &#125;  <br>        <span class="hljs-keyword">return</span> size;  <br>    &#125;  <br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">size</span><span class="hljs-params">()</span>  <br>    &#123;  <br>        <span class="hljs-keyword">return</span> size(sentinel.next);  <br>    &#125;  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">DLL</span><span class="hljs-params">(IntNode p)</span>  <br>    &#123;  <br>        <span class="hljs-keyword">while</span>(p!= <span class="hljs-literal">null</span>) &#123;  <br>            System.out.print(p.item+<span class="hljs-string">&quot; &quot;</span>);  <br>            p = p.next;  <br>        &#125;  <br>    &#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>数据结构与算法</category>
      
      <category>CS61B</category>
      
    </categories>
    
    
    <tags>
      
      <tag>cs</tag>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Lecture4-Lists II SLLists</title>
    <link href="/2025/05/26/Lecture%204/"/>
    <url>/2025/05/26/Lecture%204/</url>
    
    <content type="html"><![CDATA[<p>本节课主要学习了单链表的创建，以及对单链表的简单操作（java实现）<br>首先，为什么要创造链表这种数据结构？<br>个人认为，链表与数组很相似，但各有优缺点，这里只说链表的优点。就是链表的长度是可更改的，不会造成空间的浪费，这是数组不具有的。同时删除元素，增添元素等操作，链表也比数组更加容易。</p><hr><h2 id="1-SLLists的创建"><a href="#1-SLLists的创建" class="headerlink" title="1.SLLists的创建"></a>1.SLLists的创建</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">array</span> &#123;  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">IntNode</span>  <br>    &#123;  <br>        <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> item;  <span class="hljs-comment">//数据</span><br>        <span class="hljs-keyword">public</span> IntNode next;  <span class="hljs-comment">//与下一项的链接</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-title function_">IntNode</span><span class="hljs-params">(<span class="hljs-type">int</span> i, IntNode n)</span>  <br>        &#123;  <br>            item = i;  <br>            next = n;  <br>        &#125;  <span class="hljs-comment">//创建结点的方法</span><br>        <span class="hljs-keyword">public</span> IntNode first;<span class="hljs-comment">//头结点</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-title function_">array</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span>  <br>&#123;  <br>    first = <span class="hljs-keyword">new</span> <span class="hljs-title class_">IntNode</span>(n, <span class="hljs-literal">null</span>);  <br>&#125;<span class="hljs-comment">//初始化</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span>  <span class="hljs-title function_">addarray</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span>  <br>&#123;  <br>    first = <span class="hljs-keyword">new</span> <span class="hljs-title class_">IntNode</span>(x, first);  <br>&#125;<span class="hljs-comment">//头插法增加新节点</span><br>    &#125;<br></code></pre></td></tr></table></figure><h2 id="2-对SLLists的简单操作"><a href="#2-对SLLists的简单操作" class="headerlink" title="2. 对SLLists的简单操作"></a>2. 对SLLists的简单操作</h2><ol><li>获得头节点数据</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getfirst</span><span class="hljs-params">()</span>  <br>&#123;  <br><span class="hljs-keyword">return</span> first.item;  <br>&#125;<br></code></pre></td></tr></table></figure><ol start="2"><li>在链表末尾添加新节点</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addarraylast</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span>  <br>&#123;  <br>    <span class="hljs-type">IntNode</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> first;    <br>    <span class="hljs-keyword">while</span>(temp.next != <span class="hljs-literal">null</span>)  <br>        temp = temp.next;  <br>    temp.next = <span class="hljs-keyword">new</span> <span class="hljs-title class_">IntNode</span>(x, <span class="hljs-literal">null</span>);  <br>&#125;<br></code></pre></td></tr></table></figure><ol start="3"><li>获得链表长度（迭代和递归都可以实现）</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-title function_">size</span><span class="hljs-params">(IntNode p)</span>  <br>&#123;  <br>    <span class="hljs-type">int</span> <span class="hljs-variable">size</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;  <br>    <span class="hljs-type">IntNode</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> first;  <br>    <span class="hljs-keyword">while</span>(temp != <span class="hljs-literal">null</span>)  <br>    &#123;  <br>        temp = temp.next;  <br>        size++;  <br>    &#125;  <br>    <span class="hljs-keyword">return</span> size;  <br>&#125;  <br><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">size</span><span class="hljs-params">()</span>  <br>&#123;  <br>    <span class="hljs-keyword">return</span> size(first);  <br>&#125;<br></code></pre></td></tr></table></figure><p>当然，这个方法是很费时间的，需要遍历一遍链表。<br>也可以在创建链表是就定义size为1，每增加一个节点就令size++。利用一点点空间，换来更高的效率。<br>以上我们所有方法的实现，都是建立在first有意义的基础上。如果链表是空的，first&#x3D;null，那么我们也可以在每个方法前都先判断一下first是否有意义，但这会让代码变得臃肿，所以我们采取另一种方法。     </p><h2 id="3-哨兵sentinel"><a href="#3-哨兵sentinel" class="headerlink" title="3.哨兵sentinel"></a>3.哨兵sentinel</h2><p>就好像钢七连解散后许三多仍然坚持唱连歌一样，不管链表是不是空的，哨兵都存在。    </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> IntNode sentinel=<span class="hljs-keyword">new</span> <span class="hljs-title class_">IntNode</span>(<span class="hljs-number">0</span>,<span class="hljs-literal">null</span>);<span class="hljs-comment">//哨兵的数值随意</span><br></code></pre></td></tr></table></figure><p>然后，在方法中，把所有first改为sentinel.next即可，减少了代码的重复性。</p>]]></content>
    
    
    <categories>
      
      <category>数据结构与算法</category>
      
      <category>CS61B</category>
      
    </categories>
    
    
    <tags>
      
      <tag>cs</tag>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>5月19~25日总结</title>
    <link href="/2025/05/25/5%E6%9C%8819-25%E6%97%A5%E6%80%BB%E7%BB%93/"/>
    <url>/2025/05/25/5%E6%9C%8819-25%E6%97%A5%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<p>这一周也没干什么大事，不过有了很多感悟，感受到自己有很多问题，所以干脆都写到总结里。</p><p>这周六的江苏省高数竞赛，近似于裸考，考前看了看往年的卷子，考前一天甚至玩到半夜，第二天早上直接去考了，感觉很奇怪，现在学的曲线，曲面积分做的很吃力，反而是上学期学的做的还不错，希望能得个奖吧（要是能得省一就好了，有奖金）</p><p>然后也明确了健身计划，采取三分化的方式（健身饮食计划也传到了我的博客上）。目前除了晚上饿，还能接受。</p><p>目前这周就干了这么几件大事，其他就是一些正常学习进度的推进了。接下来写一点我更想写的感悟：</p><p>我时常反思自己为什么上了一直憧憬的大学之后，干劲没有那么足了呢？</p><p>关于这点我想了很多原因，但是最重要的分为两点。其一，大学对自己水平的检验强度低，一个学期的考试次数还没初高中一个月多，对自己掌握程度并不了解，压力比较小，考试就暴露问题。其二，观念问题，我一直觉得，观念会直接影响行为，在我的潜意识中，虚度大学时光是正常的，身边人也都在这么做，所以也不会有所察觉，只有在睡前回顾自己的一天时，伴着空虚入睡。当然我也并不觉得虚度是完全错误的，凡事掌握一个度。</p><p>我总是在选择面前，不能明确自己的目的</p><p>这是在我指定健身计划中发现的问题，我一直没明确是要减脂还是增肌，所以去了健身房也是一通乱练，事倍功半。学业也是，一直在卷绩点和放弃之间徘徊，感觉这学期绩点是快要崩了，也就不用选择了。学习也是，总是在不同的方法，内容之间迂回，结果就是什么也没完成。</p><p>目光太狭隘，只能看到明天，我希望能够看的更远。</p><p>这一点也牵扯到peer pressure，因为目光太狭隘，只能看到自己的同学，和他们竞争，怕被超过怕超不过，在内卷的裹挟下越陷越深，其实眼光放长远，比自己强的人数不胜数，一个个去比，没有任何意义，能够让自己不断进步，就是完全的胜利。因为目光太狭隘，太在意眼前的得失，如果将眼光放远，其实会少很多烦恼，也会有更多的希望与动力。</p><p>接下来一周，要明确自己的方向，不仅是现在的，也要想想未来自己真正想做什么。</p>]]></content>
    
    
    <categories>
      
      <category>总结</category>
      
    </categories>
    
    
    <tags>
      
      <tag>日常</tag>
      
      <tag>大学生活</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Lecture3-Lists I References Recursion and no Lists</title>
    <link href="/2025/05/25/Lecture%203(no%20lists)/"/>
    <url>/2025/05/25/Lecture%203(no%20lists)/</url>
    
    <content type="html"><![CDATA[<p>延用上次课的Dog类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Dog</span> &#123;  <br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> weight;  <br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Dog</span><span class="hljs-params">(<span class="hljs-type">int</span> w)</span>  <br>    &#123;  <br>        weight=w;  <br>    &#125;<br>    <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;  <br>    <span class="hljs-type">Dog</span> <span class="hljs-variable">dog1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Dog</span>(<span class="hljs-number">1</span>);  <br>    <span class="hljs-type">Dog</span> <span class="hljs-variable">dog2</span> <span class="hljs-operator">=</span> dog1;  <br>    dog2.weight=<span class="hljs-number">100</span>;  <br>    System.out.println(dog1.weight);  <br>    System.out.println(dog2.weight);<br></code></pre></td></tr></table></figure><p>代码含义为，创建dog1并将体重设置成100，在创建dog2，并把dog1赋值给dog2，并将dog2的体重改为100，分别输出两只狗的体重。<br>运行后发现，两只狗的体重都变成了100，这是为什么？<br>原来，当我们设置一个新的dog1时，计算机会用一块内存来存储dog1的相应数据（比如weight的大小），但是计算机的内存是很大的，下次用的时候怎么知道他在哪呢？<br>我们用对象名dog1来存储其数据的位置，就像是埋宝藏，weight就是被埋的宝藏而dog1则是宝藏上的牌子，告诉我们weight在这里，能够快速找到。<br>那么dog2&#x3D;dog1，其实并没有新创建一只狗，dog2只是存储了dog1的位置，而改变dog2的体重，就是改变dog2位置的那只狗的体重，所以dog1，dog2的weight都变为100。<br><em>注意，只有引用类型有这个特征，像int、double这样的数据类型，重复上述操作就是重新创建了一个区域来存储数值，改变其中一个另一个不受影响。</em></p>]]></content>
    
    
    <categories>
      
      <category>数据结构与算法</category>
      
      <category>CS61B</category>
      
    </categories>
    
    
    <tags>
      
      <tag>cs</tag>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Lecture2-Defining and Using Classes</title>
    <link href="/2025/05/25/Lecture%202/"/>
    <url>/2025/05/25/Lecture%202/</url>
    
    <content type="html"><![CDATA[<p>本节课主要讲了java中静态方法(static)和非静态方法(non-static)的区别，和相应的使用方式。<br>以类Dog为例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Dog</span> &#123; <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">makenoise</span><span class="hljs-params">()</span><br>    &#123;<br>     System.out.println(<span class="hljs-string">&quot;bark!!&quot;</span>);<br>    &#125; <br>&#125;<br></code></pre></td></tr></table></figure><p>我们定义了一个makenoise方法，其中的狗只能bark的叫，显然不符合现实，我们知道，狗的叫声是由狗的体重决定的（假设），所以想要在Dog类中，加入特征weight，根据其大小判断具体的叫声。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Dog</span> &#123;  <br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> weight;  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">makeNoise</span><span class="hljs-params">()</span> &#123;  <br>        <span class="hljs-keyword">if</span>(weight&lt;<span class="hljs-number">10</span>)  <br>            System.out.println(<span class="hljs-string">&quot;yipyip!!!&quot;</span>);  <br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(weight &lt;<span class="hljs-number">30</span>) &#123;  <br>            System.out.println(<span class="hljs-string">&quot;bark!!!&quot;</span>);  <br>        &#125;  <br>        <span class="hljs-keyword">else</span>&#123;  <br>            System.out.println(<span class="hljs-string">&quot;arooo!!!&quot;</span>);  <br>        &#125;  <br>    &#125;  <br>&#125;<br></code></pre></td></tr></table></figure><p>通过对比，发现在定义方法时有static会报错，为什么？<br>因为要使用的weight为非静态变量，而静态方法无法调用非静态变量，所以去掉了static。<br>此时我们再调用makenoise方法，发现还是失败的。<br>这又是为什么？<br>因为非静态的方法需要在实例下才能调用，而静态方法则无需实例，可以直接调用<br>可以理解为，静态方法是所有狗的特征，所以我无需代入具体的狗，而非静态的方法是具体的狗的特征，需要一个实例才能使用。<br>接下来将用两种不同形式去表示两只狗哪只的体重较大：    </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Dog <span class="hljs-title function_">Maxweights</span><span class="hljs-params">(Dog d, Dog d1)</span>  <br>&#123;  <br>    <span class="hljs-keyword">if</span>(d.weight&gt;=d1.weight)  <br>        <span class="hljs-keyword">return</span> d;  <br>    <span class="hljs-keyword">else</span>  <br>        <span class="hljs-keyword">return</span> d1;  <br>&#125;<br></code></pre></td></tr></table></figure><p>此方法指取两只狗进行比较，再看非静态方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Dog <span class="hljs-title function_">Maxweights</span><span class="hljs-params">(Dog d, Dog d1)</span>  <br>&#123;  <br>    <span class="hljs-keyword">if</span>(d.weight&gt;=d1.weight)  <br>        <span class="hljs-keyword">return</span> d;  <br>    <span class="hljs-keyword">else</span>  <br>        <span class="hljs-keyword">return</span> d1;  <br>&#125;<br></code></pre></td></tr></table></figure><p>这代表了赋予一个具体狗与其他狗比大小的能力，并返回体重较大者。</p>]]></content>
    
    
    <categories>
      
      <category>数据结构与算法</category>
      
      <category>CS61B</category>
      
    </categories>
    
    
    <tags>
      
      <tag>cs</tag>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Lecture 1-introduction</title>
    <link href="/2025/05/25/Lecture%201/"/>
    <url>/2025/05/25/Lecture%201/</url>
    
    <content type="html"><![CDATA[<h2 id="java的介绍："><a href="#java的介绍：" class="headerlink" title="java的介绍："></a>java的介绍：</h2><p>Java是一种面向对象的编程语言,可知有“类”，“方法”等重要概念，所以编写的代码都要存在一个类中,同时类中，也需要方法，才能正常运行。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HelloWorld</span><span class="hljs-comment">//类</span><br>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span><br>    &#123;<br>    &#125; <br>&#125;<br></code></pre></td></tr></table></figure><p>java中的print：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">System.out.println(<span class="hljs-string">&quot;Hello World&quot;</span>);<br></code></pre></td></tr></table></figure><p>其余定义变量，if-else，for循环与c类似。<br>其中，在java中建立一个新方法（创建新函数）需要在类中进行，同样有返回值和返回数据类型。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">larger</span><span class="hljs-params">(x,y)</span><br>&#123;<br><span class="hljs-keyword">if</span>(x&gt;y)<br><span class="hljs-keyword">return</span> x;<br><span class="hljs-keyword">else</span> <br><span class="hljs-keyword">return</span> y;<br>&#125;<br></code></pre></td></tr></table></figure><p>java具有模块化的优点，模块之间互不影响<br>实现类car的定义：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Car</span> &#123;  <br>    String name;  <br>    <span class="hljs-type">int</span> wheels=<span class="hljs-number">4</span>;  <br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Car</span><span class="hljs-params">(String name)</span>  <br>    &#123;  <br>        <span class="hljs-built_in">this</span>.name=name;  <br>        <span class="hljs-built_in">this</span>.wheels=<span class="hljs-number">4</span>;  <br>    &#125;  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">drive</span><span class="hljs-params">()</span>  <br>    &#123;  <br>        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">this</span>.wheels&lt;<span class="hljs-number">4</span>)  <br>            System.out.println(<span class="hljs-built_in">this</span>.name+<span class="hljs-string">&quot;what?the car is died&quot;</span>);  <br>        <span class="hljs-keyword">else</span>  <br>            System.out.println(<span class="hljs-built_in">this</span>.name+<span class="hljs-string">&quot;wow,what a fast car!&quot;</span>);  <br>    &#125;  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">driveinhole</span><span class="hljs-params">()</span>  <br>    &#123;  <br>        <span class="hljs-built_in">this</span>.wheels--;  <br>        System.out.println(<span class="hljs-built_in">this</span>.name+<span class="hljs-string">&quot;&#x27;s something lost&quot;</span>);  <br>    &#125;  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>  <br>    &#123;  <br>        <span class="hljs-type">Car</span> <span class="hljs-variable">car1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Car</span>(<span class="hljs-string">&quot;lalala&quot;</span>);  <br>        car1.drive();  <br>        car1.driveinhole();  <br>        car1.drive();  <br>    &#125;  <br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>数据结构与算法</category>
      
      <category>CS61B</category>
      
    </categories>
    
    
    <tags>
      
      <tag>cs</tag>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>健身小白饮食运动计划</title>
    <link href="/2025/05/25/%E5%81%A5%E8%BA%AB%E5%B0%8F%E7%99%BD%E9%A5%AE%E9%A3%9F%E8%BF%90%E5%8A%A8%E8%AE%A1%E5%88%92/"/>
    <url>/2025/05/25/%E5%81%A5%E8%BA%AB%E5%B0%8F%E7%99%BD%E9%A5%AE%E9%A3%9F%E8%BF%90%E5%8A%A8%E8%AE%A1%E5%88%92/</url>
    
    <content type="html"><![CDATA[<h1 id="健身计划"><a href="#健身计划" class="headerlink" title="健身计划"></a>健身计划</h1><h2 id="基础信息"><a href="#基础信息" class="headerlink" title="基础信息"></a>基础信息</h2><p>身高180cm，体重76.7kg。<br><strong>基础代谢率 (BMR)</strong>: 约 1802 卡路里&#x2F;天<br><strong>每日总能量消耗 (TDEE)</strong>: 约 3108 卡路里&#x2F;天（活动较多）</p><h2 id="计划"><a href="#计划" class="headerlink" title="计划"></a>计划</h2><p><em><strong>饮食</strong></em>：要在吃够基础代谢的基础上，制造热量缺口，同时要保证蛋白质的足够摄入。    </p><ol><li>早饭：咖啡一杯，全麦面包两片，鸡蛋三个（一个全蛋，两个蛋清）</li><li>午饭:   食堂打饭一份菜、一份肉，加一碗米饭。每周六午饭放纵</li><li>晚饭：鸡胸肉+荞麦面+香蕉一根</li></ol><hr><p><em><strong>运动</strong></em>：采用三分化，四天为一循环 （每天+30min椭圆机）<br>Day1：</p><ol><li>背：高位下拉   坐姿钢线划船 杠铃划船  3组</li><li>二头：龙门架弯举  龙门架单臂二头  杠铃弯举 3组</li><li>肩后束：龙门架绳索面拉</li></ol><hr><p>Day2：</p><ol><li>胸：坐姿器械推胸  蝴蝶机  龙门架夹胸</li><li>肩前束：杠铃推举  龙门架侧平举&#x2F;提拉</li><li>肱三头：龙门架绳索臂屈伸  绳索过顶臂屈伸  直杆下压</li></ol><hr><p>Day3：</p><ol><li>腿：自由深蹲  器械腿弯举  </li><li>腹：平板卷腹  悬垂举腿  坐姿卷腹</li></ol>]]></content>
    
    
    <categories>
      
      <category>生活</category>
      
      <category>健身</category>
      
    </categories>
    
    
    <tags>
      
      <tag>健身</tag>
      
      <tag>减肥</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World55</title>
    <link href="/2025/05/18/hello-world/"/>
    <url>/2025/05/18/hello-world/</url>
    
    <content type="html"><![CDATA[<p>这是一个测试文档，看看效果</p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
