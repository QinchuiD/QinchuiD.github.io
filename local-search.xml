<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>5月19~25日总结</title>
    <link href="/2025/05/25/5%E6%9C%8819-25%E6%97%A5%E6%80%BB%E7%BB%93/"/>
    <url>/2025/05/25/5%E6%9C%8819-25%E6%97%A5%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<p>这一周也没干什么大事，不过有了很多感悟，感受到自己有很多问题，所以干脆都写到总结里。</p><p>这周六的江苏省高数竞赛，近似于裸考，考前看了看往年的卷子，考前一天甚至玩到半夜，第二天早上直接去考了，感觉很奇怪，现在学的曲线，曲面积分做的很吃力，反而是上学期学的做的还不错，希望能得个奖吧（要是能得省一就好了，有奖金）</p><p>然后也明确了健身计划，采取三分化的方式（健身饮食计划也传到了我的博客上）。目前除了晚上饿，还能接受。</p><p>目前这周就干了这么几件大事，其他就是一些正常学习进度的推进了。接下来写一点我更想写的感悟：</p><p>我时常反思自己为什么上了一直憧憬的大学之后，干劲没有那么足了呢？</p><p>关于这点我想了很多原因，但是最重要的分为两点。其一，大学对自己水平的检验强度低，一个学期的考试次数还没初高中一个月多，对自己掌握程度并不了解，压力比较小，考试就暴露问题。其二，观念问题，我一直觉得，观念会直接影响行为，在我的潜意识中，虚度大学时光是正常的，身边人也都在这么做，所以也不会有所察觉，只有在睡前回顾自己的一天时，伴着空虚入睡。当然我也并不觉得虚度是完全错误的，凡事掌握一个度。</p><p>我总是在选择面前，不能明确自己的目的</p><p>这是在我指定健身计划中发现的问题，我一直没明确是要减脂还是增肌，所以去了健身房也是一通乱练，事倍功半。学业也是，一直在卷绩点和放弃之间徘徊，感觉这学期绩点是快要崩了，也就不用选择了。学习也是，总是在不同的方法，内容之间迂回，结果就是什么也没完成。</p><p>目光太狭隘，只能看到明天，我希望能够看的更远。</p><p>这一点也牵扯到peer pressure，因为目光太狭隘，只能看到自己的同学，和他们竞争，怕被超过怕超不过，在内卷的裹挟下越陷越深，其实眼光放长远，比自己强的人数不胜数，一个个去比，没有任何意义，能够让自己不断进步，就是完全的胜利。因为目光太狭隘，太在意眼前的得失，如果将眼光放远，其实会少很多烦恼，也会有更多的希望与动力。</p><p>接下来一周，要明确自己的方向，不仅是现在的，也要想想未来自己真正想做什么。</p>]]></content>
    
    
    <categories>
      
      <category>总结</category>
      
    </categories>
    
    
    <tags>
      
      <tag>日常</tag>
      
      <tag>大学生活</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Lecture3-Lists I References Recursion and no Lists</title>
    <link href="/2025/05/25/Lecture%203(no%20lists)/"/>
    <url>/2025/05/25/Lecture%203(no%20lists)/</url>
    
    <content type="html"><![CDATA[<p>延用上次课的Dog类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Dog</span> &#123;  <br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> weight;  <br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Dog</span><span class="hljs-params">(<span class="hljs-type">int</span> w)</span>  <br>    &#123;  <br>        weight=w;  <br>    &#125;<br>    <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;  <br>    <span class="hljs-type">Dog</span> <span class="hljs-variable">dog1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Dog</span>(<span class="hljs-number">1</span>);  <br>    <span class="hljs-type">Dog</span> <span class="hljs-variable">dog2</span> <span class="hljs-operator">=</span> dog1;  <br>    dog2.weight=<span class="hljs-number">100</span>;  <br>    System.out.println(dog1.weight);  <br>    System.out.println(dog2.weight);<br></code></pre></td></tr></table></figure><p>代码含义为，创建dog1并将体重设置成100，在创建dog2，并把dog1赋值给dog2，并将dog2的体重改为100，分别输出两只狗的体重。<br>运行后发现，两只狗的体重都变成了100，这是为什么？<br>原来，当我们设置一个新的dog1时，计算机会用一块内存来存储dog1的相应数据（比如weight的大小），但是计算机的内存是很大的，下次用的时候怎么知道他在哪呢？<br>我们用对象名dog1来存储其数据的位置，就像是埋宝藏，weight就是被埋的宝藏而dog1则是宝藏上的牌子，告诉我们weight在这里，能够快速找到。<br>那么dog2&#x3D;dog1，其实并没有新创建一只狗，dog2只是存储了dog1的位置，而改变dog2的体重，就是改变dog2位置的那只狗的体重，所以dog1，dog2的weight都变为100。<br><em>注意，只有引用类型有这个特征，像int、double这样的数据类型，重复上述操作就是重新创建了一个区域来存储数值，改变其中一个另一个不受影响。</em></p>]]></content>
    
    
    <categories>
      
      <category>数据结构与算法</category>
      
      <category>CS61B</category>
      
    </categories>
    
    
    <tags>
      
      <tag>cs</tag>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Lecture2-Defining and Using Classes</title>
    <link href="/2025/05/25/Lecture%202/"/>
    <url>/2025/05/25/Lecture%202/</url>
    
    <content type="html"><![CDATA[<p>本节课主要讲了java中静态方法(static)和非静态方法(non-static)的区别，和相应的使用方式。<br>以类Dog为例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Dog</span> &#123; <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">makenoise</span><span class="hljs-params">()</span><br>    &#123;<br>     System.out.println(<span class="hljs-string">&quot;bark!!&quot;</span>);<br>    &#125; <br>&#125;<br></code></pre></td></tr></table></figure><p>我们定义了一个makenoise方法，其中的狗只能bark的叫，显然不符合现实，我们知道，狗的叫声是由狗的体重决定的（假设），所以想要在Dog类中，加入特征weight，根据其大小判断具体的叫声。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Dog</span> &#123;  <br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> weight;  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">makeNoise</span><span class="hljs-params">()</span> &#123;  <br>        <span class="hljs-keyword">if</span>(weight&lt;<span class="hljs-number">10</span>)  <br>            System.out.println(<span class="hljs-string">&quot;yipyip!!!&quot;</span>);  <br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(weight &lt;<span class="hljs-number">30</span>) &#123;  <br>            System.out.println(<span class="hljs-string">&quot;bark!!!&quot;</span>);  <br>        &#125;  <br>        <span class="hljs-keyword">else</span>&#123;  <br>            System.out.println(<span class="hljs-string">&quot;arooo!!!&quot;</span>);  <br>        &#125;  <br>    &#125;  <br>&#125;<br></code></pre></td></tr></table></figure><p>通过对比，发现在定义方法时有static会报错，为什么？<br>因为要使用的weight为非静态变量，而静态方法无法调用非静态变量，所以去掉了static。<br>此时我们再调用makenoise方法，发现还是失败的。<br>这又是为什么？<br>因为非静态的方法需要在实例下才能调用，而静态方法则无需实例，可以直接调用<br>可以理解为，静态方法是所有狗的特征，所以我无需代入具体的狗，而非静态的方法是具体的狗的特征，需要一个实例才能使用。<br>接下来将用两种不同形式去表示两只狗哪只的体重较大：    </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Dog <span class="hljs-title function_">Maxweights</span><span class="hljs-params">(Dog d, Dog d1)</span>  <br>&#123;  <br>    <span class="hljs-keyword">if</span>(d.weight&gt;=d1.weight)  <br>        <span class="hljs-keyword">return</span> d;  <br>    <span class="hljs-keyword">else</span>  <br>        <span class="hljs-keyword">return</span> d1;  <br>&#125;<br></code></pre></td></tr></table></figure><p>此方法指取两只狗进行比较，再看非静态方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Dog <span class="hljs-title function_">Maxweights</span><span class="hljs-params">(Dog d, Dog d1)</span>  <br>&#123;  <br>    <span class="hljs-keyword">if</span>(d.weight&gt;=d1.weight)  <br>        <span class="hljs-keyword">return</span> d;  <br>    <span class="hljs-keyword">else</span>  <br>        <span class="hljs-keyword">return</span> d1;  <br>&#125;<br></code></pre></td></tr></table></figure><p>这代表了赋予一个具体狗与其他狗比大小的能力，并返回体重较大者。</p>]]></content>
    
    
    <categories>
      
      <category>数据结构与算法</category>
      
      <category>CS61B</category>
      
    </categories>
    
    
    <tags>
      
      <tag>cs</tag>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Lecture 1-introduction</title>
    <link href="/2025/05/25/Lecture%201/"/>
    <url>/2025/05/25/Lecture%201/</url>
    
    <content type="html"><![CDATA[<h2 id="java的介绍："><a href="#java的介绍：" class="headerlink" title="java的介绍："></a>java的介绍：</h2><p>Java是一种面向对象的编程语言([[对象]])([[面向对象编程]]),可知有“类”，“方法”等重要概念，所以编写的代码都要存在一个类中,同时类中，也需要方法，才能正常运行。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HelloWorld</span><span class="hljs-comment">//类</span><br>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span><br>    &#123;<br>    &#125; <br>&#125;<br></code></pre></td></tr></table></figure><p>java中的print：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">System.out.println(<span class="hljs-string">&quot;Hello World&quot;</span>);<br></code></pre></td></tr></table></figure><p>其余定义变量，if-else，for循环与c类似。<br>其中，在java中建立一个新方法（创建新函数）需要在类中进行，同样有返回值和返回数据类型。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">larger</span><span class="hljs-params">(x,y)</span><br>&#123;<br><span class="hljs-keyword">if</span>(x&gt;y)<br><span class="hljs-keyword">return</span> x;<br><span class="hljs-keyword">else</span> <br><span class="hljs-keyword">return</span> y;<br>&#125;<br></code></pre></td></tr></table></figure><p>java具有模块化的优点，模块之间互不影响<br>实现类car的定义：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Car</span> &#123;  <br>    String name;  <br>    <span class="hljs-type">int</span> wheels=<span class="hljs-number">4</span>;  <br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Car</span><span class="hljs-params">(String name)</span>  <br>    &#123;  <br>        <span class="hljs-built_in">this</span>.name=name;  <br>        <span class="hljs-built_in">this</span>.wheels=<span class="hljs-number">4</span>;  <br>    &#125;  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">drive</span><span class="hljs-params">()</span>  <br>    &#123;  <br>        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">this</span>.wheels&lt;<span class="hljs-number">4</span>)  <br>            System.out.println(<span class="hljs-built_in">this</span>.name+<span class="hljs-string">&quot;what?the car is died&quot;</span>);  <br>        <span class="hljs-keyword">else</span>  <br>            System.out.println(<span class="hljs-built_in">this</span>.name+<span class="hljs-string">&quot;wow,what a fast car!&quot;</span>);  <br>    &#125;  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">driveinhole</span><span class="hljs-params">()</span>  <br>    &#123;  <br>        <span class="hljs-built_in">this</span>.wheels--;  <br>        System.out.println(<span class="hljs-built_in">this</span>.name+<span class="hljs-string">&quot;&#x27;s something lost&quot;</span>);  <br>    &#125;  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>  <br>    &#123;  <br>        <span class="hljs-type">Car</span> <span class="hljs-variable">car1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Car</span>(<span class="hljs-string">&quot;lalala&quot;</span>);  <br>        car1.drive();  <br>        car1.driveinhole();  <br>        car1.drive();  <br>    &#125;  <br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>数据结构与算法</category>
      
      <category>CS61B</category>
      
    </categories>
    
    
    <tags>
      
      <tag>cs</tag>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>健身小白饮食运动计划</title>
    <link href="/2025/05/25/%E5%81%A5%E8%BA%AB%E5%B0%8F%E7%99%BD%E9%A5%AE%E9%A3%9F%E8%BF%90%E5%8A%A8%E8%AE%A1%E5%88%92/"/>
    <url>/2025/05/25/%E5%81%A5%E8%BA%AB%E5%B0%8F%E7%99%BD%E9%A5%AE%E9%A3%9F%E8%BF%90%E5%8A%A8%E8%AE%A1%E5%88%92/</url>
    
    <content type="html"><![CDATA[<h1 id="健身计划"><a href="#健身计划" class="headerlink" title="健身计划"></a>健身计划</h1><h2 id="基础信息"><a href="#基础信息" class="headerlink" title="基础信息"></a>基础信息</h2><p>身高180cm，体重76.7kg。<br><strong>基础代谢率 (BMR)</strong>: 约 1802 卡路里&#x2F;天<br><strong>每日总能量消耗 (TDEE)</strong>: 约 3108 卡路里&#x2F;天（活动较多）</p><h2 id="计划"><a href="#计划" class="headerlink" title="计划"></a>计划</h2><p><em><strong>饮食</strong></em>：要在吃够基础代谢的基础上，制造热量缺口，同时要保证蛋白质的足够摄入。    </p><ol><li>早饭：咖啡一杯，全麦面包两片，鸡蛋三个（一个全蛋，两个蛋清）</li><li>午饭:   食堂打饭一份菜、一份肉，加一碗米饭。每周六午饭放纵</li><li>晚饭：鸡胸肉+荞麦面+香蕉一根</li></ol><hr><p><em><strong>运动</strong></em>：采用三分化，四天为一循环 （每天+30min椭圆机）<br>Day1：</p><ol><li>背：高位下拉   坐姿钢线划船 杠铃划船  3组</li><li>二头：龙门架弯举  龙门架单臂二头  杠铃弯举 3组</li><li>肩后束：龙门架绳索面拉</li></ol><hr><p>Day2：</p><ol><li>胸：坐姿器械推胸  蝴蝶机  龙门架夹胸</li><li>肩前束：杠铃推举  龙门架侧平举&#x2F;提拉</li><li>肱三头：龙门架绳索臂屈伸  绳索过顶臂屈伸  直杆下压</li></ol><hr><p>Day3：</p><ol><li>腿：自由深蹲  器械腿弯举  </li><li>腹：平板卷腹  悬垂举腿  坐姿卷腹</li></ol>]]></content>
    
    
    <categories>
      
      <category>生活</category>
      
      <category>健身</category>
      
    </categories>
    
    
    <tags>
      
      <tag>健身</tag>
      
      <tag>减肥</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>第一章 概率论基本概念</title>
    <link href="/2025/05/20/%E6%A6%82%E7%8E%87%E8%AE%BA%E8%87%AA%E5%AD%A6%E7%AC%94%E8%AE%B0/"/>
    <url>/2025/05/20/%E6%A6%82%E7%8E%87%E8%AE%BA%E8%87%AA%E5%AD%A6%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p><strong>确定性现象</strong>：在一定条件下，必然发生。<br><strong>统计规律性</strong>：一定条件下，可能出现多种结果，无法预知，但结果呈现规律性。<br><strong>随机现象</strong>：个别试验中有不确定性，大量试验中具有统计规律性。    </p><h1 id="1-随机试验"><a href="#1-随机试验" class="headerlink" title="1.随机试验"></a>1.随机试验</h1><p><strong>随机试验的特点</strong>：    </p><ol><li>可以在相同条件下重复进行</li><li>每次试验可能结果不唯一，且事先知道所有可能结果</li><li>进行试验前，不确定哪一个结果出现</li></ol><h1 id="2-样本空间、随机事件"><a href="#2-样本空间、随机事件" class="headerlink" title="2.样本空间、随机事件"></a>2.样本空间、随机事件</h1><h2 id="1-样本空间"><a href="#1-样本空间" class="headerlink" title="1.样本空间"></a>1.样本空间</h2><p>对于随机试验，因为结果不唯一但所有结果已知，所以将随机试验E所有可能结果组成的集合称为<strong>样本空间</strong>（记为S），其中的元素，称为<strong>样本点</strong>。</p><h2 id="2-随机事件"><a href="#2-随机事件" class="headerlink" title="2.随机事件"></a>2.随机事件</h2><p>对于随机试验，以考试成绩t举例，显然样本空间为[0，100]，但往往我们只关心及格了的成绩，所以真正想知道的是[60,100]这个区间的概率，这种样本空间的子集称为<strong>随机事件</strong>（简称事件），当成绩t处于这一区间中，称为<strong>事件发生</strong>。<br>假设只关心考满分或其他特定成绩的情况，既随机事件中只有一个样本点，则称为<strong>基本事件</strong>。<br>如果无论考多少都关注，既随机事件的样本点包含所有结果，则称为<strong>必然事件</strong>，如果不包含任何样本点，则称为<strong>不可能事件</strong>。</p><h2 id="3-事件间的关系与事件的运算："><a href="#3-事件间的关系与事件的运算：" class="headerlink" title="3.事件间的关系与事件的运算："></a>3.事件间的关系与事件的运算：</h2><ol><li>$A \subset B$ ，A是B的子集!</li><li>$A\cup B$  ，A与B的和事件</li><li>$A \cap B$ ，A与B的积事件</li><li>A-B，差事件，表示属于A但不属于B的部分</li><li>若$A \cap B$ 为空集，则A，B为互斥事件，互不相容，不会同时发生。</li><li>若$A \cap B$ 为空集，$A \cup B$ 为S，那么A，B称为逆事件，对立事件.<br>运算律：![[Pasted image 20250520122710.png]]<br>在进行事件运算时，经常要用到下述定律。设 (A, B, C) 为事件，则有</li></ol><p><strong>交换律：</strong><br>$A \cup B &#x3D; B \cup A$； <br>$A \cap B &#x3D; B \cap A$。</p><p><strong>结合律：</strong><br>$A \cup (B \cup C) &#x3D; (A \cup B) \cup C$； <br>$A \cap (B \cap C) &#x3D; (A \cap B) \cap C$。</p><p><strong>分配律：</strong><br>$A \cup (B \cap C) &#x3D; (A \cup B) \cap (A \cup C))$； <br>$(A \cap (B \cup C)) &#x3D; (A \cap B) \cup (A \cap C)$。</p><p><strong>德摩根律：</strong><br>$\overline{A \cup B} &#x3D; \overline{A} \cap \overline{B}$； <br>$\overline{A \cap B} &#x3D; \overline{A} \cup \overline{B}$。</p><p><strong>这一章的知识都是高中知识，所以不再继续做笔记，直接开下一章</strong></p>]]></content>
    
    
    <categories>
      
      <category>数学基础</category>
      
      <category>概率论</category>
      
    </categories>
    
    
    <tags>
      
      <tag>概率论, 学习笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World55</title>
    <link href="/2025/05/18/hello-world/"/>
    <url>/2025/05/18/hello-world/</url>
    
    <content type="html"><![CDATA[<p>这是一个测试文档，看看效果</p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
