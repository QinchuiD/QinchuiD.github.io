<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>pta的12到13周</title>
    <link href="/2025/05/20/pta.12.13/"/>
    <url>/2025/05/20/pta.12.13/</url>
    
    <content type="html"><![CDATA[<h1 id="函数题"><a href="#函数题" class="headerlink" title="函数题"></a>函数题</h1><h2 id="6-1-邻接矩阵存储图的深度优先遍历"><a href="#6-1-邻接矩阵存储图的深度优先遍历" class="headerlink" title="6-1 邻接矩阵存储图的深度优先遍历"></a>6-1 <strong>邻接矩阵存储图的深度优先遍历</strong></h2><h3 id="题干"><a href="#题干" class="headerlink" title="题干"></a>题干</h3><p>试实现邻接矩阵存储图的深度优先遍历。</p><h3 id="函数接口定义："><a href="#函数接口定义：" class="headerlink" title="函数接口定义："></a>函数接口定义：</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">DFS</span><span class="hljs-params">( MGraph Graph, Vertex V, <span class="hljs-type">void</span> (*Visit)(Vertex) )</span>;<br></code></pre></td></tr></table></figure><p>其中<code>MGraph</code>是邻接矩阵存储的图，定义如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">GNode</span> *<span class="hljs-title">PtrToGNode</span>;</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">GNode</span>&#123;</span><br>    <span class="hljs-type">int</span> Nv;  <span class="hljs-comment">/* 顶点数 */</span><br>    <span class="hljs-type">int</span> Ne;  <span class="hljs-comment">/* 边数   */</span><br>    WeightType G[MaxVertexNum][MaxVertexNum]; <span class="hljs-comment">/* 邻接矩阵 */</span><br>&#125;;<br><span class="hljs-keyword">typedef</span> PtrToGNode MGraph; <span class="hljs-comment">/* 以邻接矩阵存储的图类型 */</span><br></code></pre></td></tr></table></figure><p>函数<code>DFS</code>应从第<code>V</code>个顶点出发递归地深度优先遍历图<code>Graph</code>，遍历时用裁判定义的函数<code>Visit</code>访问每个顶点。当访问邻接点时，要求按序号递增的顺序。题目保证<code>V</code>是图中的合法顶点。</p><h3 id="裁判测试程序样例："><a href="#裁判测试程序样例：" class="headerlink" title="裁判测试程序样例："></a>裁判测试程序样例：</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">enum</span> &#123;</span><span class="hljs-literal">false</span>, <span class="hljs-literal">true</span>&#125; <span class="hljs-type">bool</span>;<br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MaxVertexNum 10  <span class="hljs-comment">/* 最大顶点数设为10 */</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> INFINITY 65535   <span class="hljs-comment">/* ∞设为双字节无符号整数的最大值65535*/</span></span><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">int</span> Vertex;      <span class="hljs-comment">/* 用顶点下标表示顶点,为整型 */</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">int</span> WeightType;  <span class="hljs-comment">/* 边的权值设为整型 */</span><br><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">GNode</span> *<span class="hljs-title">PtrToGNode</span>;</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">GNode</span>&#123;</span><br>    <span class="hljs-type">int</span> Nv;  <span class="hljs-comment">/* 顶点数 */</span><br>    <span class="hljs-type">int</span> Ne;  <span class="hljs-comment">/* 边数   */</span><br>    WeightType G[MaxVertexNum][MaxVertexNum]; <span class="hljs-comment">/* 邻接矩阵 */</span><br>&#125;;<br><span class="hljs-keyword">typedef</span> PtrToGNode MGraph; <span class="hljs-comment">/* 以邻接矩阵存储的图类型 */</span><br><span class="hljs-type">bool</span> Visited[MaxVertexNum]; <span class="hljs-comment">/* 顶点的访问标记 */</span><br><br>MGraph <span class="hljs-title function_">CreateGraph</span><span class="hljs-params">()</span>; <span class="hljs-comment">/* 创建图并且将Visited初始化为false；裁判实现，细节不表 */</span><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">Visit</span><span class="hljs-params">( Vertex V )</span><br>&#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot; %d&quot;</span>, V);<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">DFS</span><span class="hljs-params">( MGraph Graph, Vertex V, <span class="hljs-type">void</span> (*Visit)(Vertex) )</span>;<br><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    MGraph G;<br>    Vertex V;<br><br>    G = CreateGraph();<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;V);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;DFS from %d:&quot;</span>, V);<br>    DFS(G, V, Visit);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-comment">/* 你的代码将被嵌在这里 */</span><br></code></pre></td></tr></table></figure><h3 id="输入样例：给定图如下"><a href="#输入样例：给定图如下" class="headerlink" title="输入样例：给定图如下"></a>输入样例：给定图如下</h3><p><img src="/./pta%E7%9A%8412%E5%88%B013%E5%91%A8/101.jpg" alt="101"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs in">5<br></code></pre></td></tr></table></figure><h3 id="输出样例："><a href="#输出样例：" class="headerlink" title="输出样例："></a>输出样例：</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs out">DFS from 5: 5 1 3 0 2 4 6<br></code></pre></td></tr></table></figure><h3 id="答题思路："><a href="#答题思路：" class="headerlink" title="答题思路："></a>答题思路：</h3><p>最简单的dfs函数。</p><p><strong>注意本题目无法使用测评，只能提交才能看到正常输出。在线测评会报段错误！</strong></p><h3 id="答案："><a href="#答案：" class="headerlink" title="答案："></a>答案：</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">DFS</span><span class="hljs-params">( MGraph Graph, Vertex V, <span class="hljs-type">void</span> (*Visit)(Vertex) )</span>&#123;<br>    Visit(V);<br>    Visited[V]=<span class="hljs-literal">true</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;Graph-&gt;Nv;i++)&#123;<br>        <span class="hljs-keyword">if</span>(Graph-&gt;G[V][i]==<span class="hljs-number">1</span>&amp;&amp;Visited[i]==<span class="hljs-literal">false</span>)&#123;<br>            DFS(Graph,i,Visit);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><img src="./pta的12到13周/image-20250520224259408-1747752183295-1-1747752190246-3.png" alt="image-20250520224259408" style="zoom:50%;" /><h2 id="6-2-邻接表存储图的广度优先遍历"><a href="#6-2-邻接表存储图的广度优先遍历" class="headerlink" title="6-2 邻接表存储图的广度优先遍历"></a><strong>6-2 邻接表存储图的广度优先遍历</strong></h2><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>试实现邻接表存储图的广度优先遍历。</p><h3 id="函数接口定义：-1"><a href="#函数接口定义：-1" class="headerlink" title="函数接口定义："></a>函数接口定义：</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">BFS</span> <span class="hljs-params">( LGraph Graph, Vertex S, <span class="hljs-type">void</span> (*Visit)(Vertex) )</span></span>;<br></code></pre></td></tr></table></figure><p>其中<code>LGraph</code>是邻接表存储的图，定义如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/* 邻接点的定义 */</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">AdjVNode</span> *<span class="hljs-title">PtrToAdjVNode</span>;</span> <br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">AdjVNode</span>&#123;</span><br>    Vertex AdjV;        <span class="hljs-comment">/* 邻接点下标 */</span><br>    PtrToAdjVNode Next; <span class="hljs-comment">/* 指向下一个邻接点的指针 */</span><br>&#125;;<br><br><span class="hljs-comment">/* 顶点表头结点的定义 */</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Vnode</span>&#123;</span><br>    PtrToAdjVNode FirstEdge; <span class="hljs-comment">/* 边表头指针 */</span><br>&#125; AdjList[MaxVertexNum];     <span class="hljs-comment">/* AdjList是邻接表类型 */</span><br><br><span class="hljs-comment">/* 图结点的定义 */</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">GNode</span> *<span class="hljs-title">PtrToGNode</span>;</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">GNode</span>&#123;</span>  <br>    <span class="hljs-type">int</span> Nv;     <span class="hljs-comment">/* 顶点数 */</span><br>    <span class="hljs-type">int</span> Ne;     <span class="hljs-comment">/* 边数   */</span><br>    AdjList G;  <span class="hljs-comment">/* 邻接表 */</span><br>&#125;;<br><span class="hljs-keyword">typedef</span> PtrToGNode LGraph; <span class="hljs-comment">/* 以邻接表方式存储的图类型 */</span><br></code></pre></td></tr></table></figure><p>函数<code>BFS</code>应从第<code>S</code>个顶点出发对邻接表存储的图<code>Graph</code>进行广度优先搜索，遍历时用裁判定义的函数<code>Visit</code>访问每个顶点。当访问邻接点时，要求按邻接表顺序访问。题目保证<code>S</code>是图中的合法顶点。</p><h3 id="裁判测试程序样例：-1"><a href="#裁判测试程序样例：-1" class="headerlink" title="裁判测试程序样例："></a>裁判测试程序样例：</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">enum</span> &#123;<span class="hljs-literal">false</span>, <span class="hljs-literal">true</span>&#125; <span class="hljs-type">bool</span>;<br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MaxVertexNum 10   <span class="hljs-comment">/* 最大顶点数设为10 */</span></span><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">int</span> Vertex;       <span class="hljs-comment">/* 用顶点下标表示顶点,为整型 */</span><br><br><span class="hljs-comment">/* 邻接点的定义 */</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">struct</span> <span class="hljs-title class_">AdjVNode</span> *PtrToAdjVNode; <br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">AdjVNode</span>&#123;<br>    Vertex AdjV;        <span class="hljs-comment">/* 邻接点下标 */</span><br>    PtrToAdjVNode Next; <span class="hljs-comment">/* 指向下一个邻接点的指针 */</span><br>&#125;;<br><br><span class="hljs-comment">/* 顶点表头结点的定义 */</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">struct</span> <span class="hljs-title class_">Vnode</span>&#123;<br>    PtrToAdjVNode FirstEdge; <span class="hljs-comment">/* 边表头指针 */</span><br>&#125; AdjList[MaxVertexNum];     <span class="hljs-comment">/* AdjList是邻接表类型 */</span><br><br><span class="hljs-comment">/* 图结点的定义 */</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">struct</span> <span class="hljs-title class_">GNode</span> *PtrToGNode;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">GNode</span>&#123;  <br>    <span class="hljs-type">int</span> Nv;     <span class="hljs-comment">/* 顶点数 */</span><br>    <span class="hljs-type">int</span> Ne;     <span class="hljs-comment">/* 边数   */</span><br>    AdjList G;  <span class="hljs-comment">/* 邻接表 */</span><br>&#125;;<br><span class="hljs-keyword">typedef</span> PtrToGNode LGraph; <span class="hljs-comment">/* 以邻接表方式存储的图类型 */</span><br><br><span class="hljs-type">bool</span> Visited[MaxVertexNum]; <span class="hljs-comment">/* 顶点的访问标记 */</span><br><br><span class="hljs-function">LGraph <span class="hljs-title">CreateGraph</span><span class="hljs-params">()</span></span>; <span class="hljs-comment">/* 创建图并且将Visited初始化为false；裁判实现，细节不表 */</span><br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Visit</span><span class="hljs-params">( Vertex V )</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot; %d&quot;</span>, V);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">BFS</span> <span class="hljs-params">( LGraph Graph, Vertex S, <span class="hljs-type">void</span> (*Visit)(Vertex) )</span></span>;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    LGraph G;<br>    Vertex S;<br><br>    G = <span class="hljs-built_in">CreateGraph</span>();<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;S);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;BFS from %d:&quot;</span>, S);<br>    <span class="hljs-built_in">BFS</span>(G, S, Visit);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-comment">/* 你的代码将被嵌在这里 */</span><br></code></pre></td></tr></table></figure><h3 id="输入样例：给定图如下-1"><a href="#输入样例：给定图如下-1" class="headerlink" title="输入样例：给定图如下"></a>输入样例：给定图如下</h3><p><img src="/./pta%E7%9A%8412%E5%88%B013%E5%91%A8/102" alt="img"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs in">5<br></code></pre></td></tr></table></figure><h3 id="输出样例：-1"><a href="#输出样例：-1" class="headerlink" title="输出样例："></a>输出样例：</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs out">BFS from 2: 2 0 3 5 4 1 6<br></code></pre></td></tr></table></figure><h3 id="答案：-1"><a href="#答案：-1" class="headerlink" title="答案："></a>答案：</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">QueueNode</span> &#123;</span><br>    Vertex Data;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">QueueNode</span> *<span class="hljs-title">Next</span>;</span><br>&#125; QueueNode;<br><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> &#123;</span><br>    QueueNode *Front;<br>    QueueNode *Rear;<br>&#125; Queue;<br><br>Queue *<span class="hljs-title function_">CreateQueue</span><span class="hljs-params">()</span> &#123;<br>    Queue *Q = (Queue *)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(Queue));<br>    Q-&gt;Front = Q-&gt;Rear = <span class="hljs-literal">NULL</span>;<br>    <span class="hljs-keyword">return</span> Q;<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">Enqueue</span><span class="hljs-params">(Queue *Q, Vertex V)</span> &#123;<br>    QueueNode *NewNode = (QueueNode *)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(QueueNode));<br>    NewNode-&gt;Data = V;<br>    NewNode-&gt;Next = <span class="hljs-literal">NULL</span>;<br>    <span class="hljs-keyword">if</span> (Q-&gt;Rear == <span class="hljs-literal">NULL</span>) &#123;<br>        Q-&gt;Front = Q-&gt;Rear = NewNode;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        Q-&gt;Rear-&gt;Next = NewNode;<br>        Q-&gt;Rear = NewNode;<br>    &#125;<br>&#125;<br><br>Vertex <span class="hljs-title function_">Dequeue</span><span class="hljs-params">(Queue *Q)</span> &#123;<br>    <span class="hljs-keyword">if</span> (Q-&gt;Front == <span class="hljs-literal">NULL</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>; <span class="hljs-comment">// 队列空</span><br>    QueueNode *Temp = Q-&gt;Front;<br>    Vertex V = Temp-&gt;Data;<br>    Q-&gt;Front = Q-&gt;Front-&gt;Next;<br>    <span class="hljs-keyword">if</span> (Q-&gt;Front == <span class="hljs-literal">NULL</span>) Q-&gt;Rear = <span class="hljs-literal">NULL</span>;<br>    <span class="hljs-built_in">free</span>(Temp);<br>    <span class="hljs-keyword">return</span> V;<br>&#125;<br><br><span class="hljs-type">bool</span> <span class="hljs-title function_">IsEmpty</span><span class="hljs-params">(Queue *Q)</span> &#123;<br>    <span class="hljs-keyword">return</span> Q-&gt;Front == <span class="hljs-literal">NULL</span>;<br>&#125;<br><span class="hljs-type">void</span> <span class="hljs-title function_">BFS</span><span class="hljs-params">(LGraph Graph, Vertex S, <span class="hljs-type">void</span> (*Visit)(Vertex))</span> &#123;<br>    Queue *Q = CreateQueue();<br>    Visited[S] = <span class="hljs-literal">true</span>;<br>    Visit(S);<br>    Enqueue(Q, S);<br><br>    <span class="hljs-keyword">while</span> (!IsEmpty(Q)) &#123;<br>        Vertex V = Dequeue(Q);<br>        PtrToAdjVNode W = Graph-&gt;G[V].FirstEdge;<br>        <span class="hljs-keyword">while</span> (W != <span class="hljs-literal">NULL</span>) &#123;<br>            <span class="hljs-keyword">if</span> (!Visited[W-&gt;AdjV]) &#123;<br>                Visited[W-&gt;AdjV] = <span class="hljs-literal">true</span>;<br>                Visit(W-&gt;AdjV);<br>                Enqueue(Q, W-&gt;AdjV);<br>            &#125;<br>            W = W-&gt;Next;<br>        &#125;<br>    &#125;<br>    <span class="hljs-built_in">free</span>(Q); <span class="hljs-comment">// 释放队列内存</span><br><br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/./pta%E7%9A%8412%E5%88%B013%E5%91%A8/image-20250520232013455.png" alt="image-20250520232013455"></p>]]></content>
    
    
    
    <tags>
      
      <tag>pta</tag>
      
      <tag>树</tag>
      
      <tag>算法题</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>第一章 概率论基本概念</title>
    <link href="/2025/05/20/%E6%A6%82%E7%8E%87%E8%AE%BA%E8%87%AA%E5%AD%A6%E7%AC%94%E8%AE%B0/"/>
    <url>/2025/05/20/%E6%A6%82%E7%8E%87%E8%AE%BA%E8%87%AA%E5%AD%A6%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p><strong>确定性现象</strong>：在一定条件下，必然发生。<br><strong>统计规律性</strong>：一定条件下，可能出现多种结果，无法预知，但结果呈现规律性。<br><strong>随机现象</strong>：个别试验中有不确定性，大量试验中具有统计规律性。    </p><h1 id="1-随机试验"><a href="#1-随机试验" class="headerlink" title="1.随机试验"></a>1.随机试验</h1><p><strong>随机试验的特点</strong>：    </p><ol><li>可以在相同条件下重复进行</li><li>每次试验可能结果不唯一，且事先知道所有可能结果</li><li>进行试验前，不确定哪一个结果出现</li></ol><h1 id="2-样本空间、随机事件"><a href="#2-样本空间、随机事件" class="headerlink" title="2.样本空间、随机事件"></a>2.样本空间、随机事件</h1><h2 id="1-样本空间"><a href="#1-样本空间" class="headerlink" title="1.样本空间"></a>1.样本空间</h2><p>对于随机试验，因为结果不唯一但所有结果已知，所以将随机试验E所有可能结果组成的集合称为<strong>样本空间</strong>（记为S），其中的元素，称为<strong>样本点</strong>。</p><h2 id="2-随机事件"><a href="#2-随机事件" class="headerlink" title="2.随机事件"></a>2.随机事件</h2><p>对于随机试验，以考试成绩t举例，显然样本空间为[0，100]，但往往我们只关心及格了的成绩，所以真正想知道的是[60,100]这个区间的概率，这种样本空间的子集称为<strong>随机事件</strong>（简称事件），当成绩t处于这一区间中，称为<strong>事件发生</strong>。<br>假设只关心考满分或其他特定成绩的情况，既随机事件中只有一个样本点，则称为<strong>基本事件</strong>。<br>如果无论考多少都关注，既随机事件的样本点包含所有结果，则称为<strong>必然事件</strong>，如果不包含任何样本点，则称为<strong>不可能事件</strong>。</p><h2 id="3-事件间的关系与事件的运算："><a href="#3-事件间的关系与事件的运算：" class="headerlink" title="3.事件间的关系与事件的运算："></a>3.事件间的关系与事件的运算：</h2><ol><li>$A \subset B$ ，A是B的子集!</li><li>$A\cup B$  ，A与B的和事件</li><li>$A \cap B$ ，A与B的积事件</li><li>A-B，差事件，表示属于A但不属于B的部分</li><li>若$A \cap B$ 为空集，则A，B为互斥事件，互不相容，不会同时发生。</li><li>若$A \cap B$ 为空集，$A \cup B$ 为S，那么A，B称为逆事件，对立事件.<br>运算律：![[Pasted image 20250520122710.png]]<br>在进行事件运算时，经常要用到下述定律。设 (A, B, C) 为事件，则有</li></ol><p><strong>交换律：</strong><br>$A \cup B &#x3D; B \cup A$； <br>$A \cap B &#x3D; B \cap A$。</p><p><strong>结合律：</strong><br>$A \cup (B \cup C) &#x3D; (A \cup B) \cup C$； <br>$A \cap (B \cap C) &#x3D; (A \cap B) \cap C$。</p><p><strong>分配律：</strong><br>$A \cup (B \cap C) &#x3D; (A \cup B) \cap (A \cup C))$； <br>$(A \cap (B \cup C)) &#x3D; (A \cap B) \cup (A \cap C)$。</p><p><strong>德摩根律：</strong><br>$\overline{A \cup B} &#x3D; \overline{A} \cap \overline{B}$； <br>$\overline{A \cap B} &#x3D; \overline{A} \cup \overline{B}$。</p><p><strong>这一章的知识都是高中知识，所以不再继续做笔记，直接开下一章</strong></p>]]></content>
    
    
    <categories>
      
      <category>数学基础</category>
      
      <category>概率论</category>
      
    </categories>
    
    
    <tags>
      
      <tag>概率论, 学习笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World55</title>
    <link href="/2025/05/18/hello-world/"/>
    <url>/2025/05/18/hello-world/</url>
    
    <content type="html"><![CDATA[<p>这是一个测试文档，看看效果</p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
