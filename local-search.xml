<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>stl算法</title>
    <link href="/2025/07/25/stl%E7%AE%97%E6%B3%95/"/>
    <url>/2025/07/25/stl%E7%AE%97%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>主要由头文件“algorithm”，“functional“，”numeric“组成  </p><h4 id="遍历"><a href="#遍历" class="headerlink" title="遍历"></a>遍历</h4><ul><li>逐项遍历<br>for_each();需要自行传入要遍历的起点和终点，以及处理的方法。<br><img src="/../img/stl%E7%AE%97%E6%B3%95/foreach.png"></li><li>数据遍历转移;<br>transform()主要用途是把一个容器中数据搬运到另一目标容器，目标容器需要提前开辟空间。传入待搬运的起点终点和目标容器的终点，以及搬运方式<br><img src="/../img/stl%E7%AE%97%E6%B3%95/transform.png"></li></ul><h4 id="查找"><a href="#查找" class="headerlink" title="查找"></a>查找</h4><ul><li>根据值查找<br>find在容器中寻找数据，返回对应的迭代器，如果数据不存在，则返回end(),对于内置的数据类型，很容易判断是否相等，但对于自定义的类，判断相等则比较复杂，需要自己重载&#x3D;&#x3D; 符号来规定判断方式![[find.png]]</li><li>根据条件查找<br>find_if()查找容器内符合某些条件的数据，需要传入范围和具体条件。<br><img src="/../img/stl%E7%AE%97%E6%B3%95/if.png"></li><li>adjacent_find<br>查找相邻重复元素，返回迭代器</li><li>binary_search二分查找<br>查找指定元素，返回值为布尔类型，查找速度快但只能查找有序序列</li><li>count<br>统计数据出现次数，与find类似，当想统计自定义类的数据时，需要自行重载&#x3D;&#x3D; 定义判断方式</li><li>count_if<br>与findif类似，统计满足条件的数据，需要自行传入具体条件</li></ul><h4 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h4><ul><li>按顺序排序<br>排序传入范围的数据，默认从小到大排序，传入greater&lt;int&gt;就可以改变<br><img src="/../img/stl%E7%AE%97%E6%B3%95/sort.png"></li><li>随机打乱<br>random_shuffle,随即调整指定范围内元素次序，以时间设置种子可以确保每次随机后结果都不同<br><img src="/../img/stl%E7%AE%97%E6%B3%95/random.png"></li><li>合并有序容器<br>merge可合并两个有序(相同顺序)的容器并按顺序排序需要传入两个容器的合并区间和目标容器的起点，目标容器需要提前扩大容量<br><img src="/../img/stl%E7%AE%97%E6%B3%95/merge.png"></li><li>翻转<br>通过revrese传入起点和终点，翻转区间内的数据</li></ul><h4 id="替换"><a href="#替换" class="headerlink" title="替换"></a>替换</h4><ul><li>指定元素替换<br>使用replace可以把区间内指定的全部旧元素换成指定的新元素，replace_if则是替换符合条件的元素<br><img src="/../img/stl%E7%AE%97%E6%B3%95/replace.png"></li><li>互换容器<br>通过swap（v1,v2）互换两个容器的元素</li></ul><h2 id="算数算法"><a href="#算数算法" class="headerlink" title="算数算法"></a>算数算法</h2><p>需要头文件&lt;numeric&gt;</p><ul><li>求和算法<br>accumulate可以计算容器一个区间内元素的总和，还需要传入起始值<br><img src="/../img/stl%E7%AE%97%E6%B3%95/accu.png"></li></ul><h2 id="集合算法"><a href="#集合算法" class="headerlink" title="集合算法"></a>集合算法</h2><ul><li>set_intersection求交集</li><li>set_union求并集</li><li>set_difference求差集<br>返回值为最后一个数据的迭代器，因为在设定容器容量可能会过大，使用end遍历可能会遍历到无效数据，所以使用返回值更加准确的访问到需要的元素<br><img src="/../img/stl%E7%AE%97%E6%B3%95/set.png"></li></ul>]]></content>
    
    
    <categories>
      
      <category>c++</category>
      
    </categories>
    
    
    <tags>
      
      <tag>cs</tag>
      
      <tag>c++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>numpy</title>
    <link href="/2025/07/24/numpy/"/>
    <url>/2025/07/24/numpy/</url>
    
    <content type="html"><![CDATA[<h1 id="创建数组"><a href="#创建数组" class="headerlink" title="创建数组"></a>创建数组</h1><p><img src="/../img/numpy/1.png"><br>可以设置为整型或者浮点型，数组具有同化的性质，例如创建一整型数组，插入一个浮点型数据，会被转为整型存入，反之亦然。<br>当然也是有办法进行转化的，有三种方式，分别为使用astype方法，使用除法，与浮点数(组)做运算<br><img src="/../img/numpy/2.png"></p><h1 id="数组维度"><a href="#数组维度" class="headerlink" title="数组维度"></a>数组维度</h1><p>不同维度的数组，外形上是以中括号区分，几层就是几维数组<br>一些函数需要传入数组的形状参数：</p><ol><li>一维数组的形状参数：形如x</li><li>二维数组：（x,y）x行y列</li><li>三维：(x,y,z)</li></ol><h2 id="数组维度的转换"><a href="#数组维度的转换" class="headerlink" title="数组维度的转换"></a>数组维度的转换</h2><p> 需要用到reshape方法，这个方法的好处是，当我们填入要改变的行或列后，填入-1后会自行计算另一个数据<br><img src="/../img/numpy/3.png"></p><h1 id="创建指定数组"><a href="#创建指定数组" class="headerlink" title="创建指定数组"></a>创建指定数组</h1><p>当已知数组的每一个元素时，可以用np.array()创建<br>也可用np.arrange()创建递增数组，可传入三个参数（起点，终点，步长）<br>若要创建同值数组，可以使用np.zeros()和np.ones()需要传入数组的形状（默认为浮点型）<br><img src="/../img/numpy/4.png"></p><h1 id="创建随机数组"><a href="#创建随机数组" class="headerlink" title="创建随机数组"></a>创建随机数组</h1><p>使用np.random.random()形成0-1的浮点型随机矩阵，可用数组运算改变随机数的范围，需要传入数组形状<br>使用np.random.randint()生成整型随机矩阵，需要传入数据范围和数组形状<br>使用np.random.normal()生成服从正态分布的随机数组，需要传入均值，标准差和数组形状<br><img src="/../img/numpy/5.png"></p><h1 id="访问数组元素"><a href="#访问数组元素" class="headerlink" title="访问数组元素"></a>访问数组元素</h1><p>对于一维数组，可直接用[]访问，且支持正序倒序访问<br>对于更高维数组，需要写行列来确定<img src="/../img/numpy/6.png">（当然也可以用来修改）<br>numpy还提供了一种更加方便的花式索引，对于一维数组，可以访问到一部分数据。对于高维数组，可以一次访问多个位置的数据。注意要使用两层中括号<br><img src="/../img/numpy/7.png"></p><h2 id="矩阵的切片"><a href="#矩阵的切片" class="headerlink" title="矩阵的切片"></a>矩阵的切片</h2><p><img src="/../img/numpy/0.png"><br>对于第一个切片，中括号1是截取第一行到第三行，中括号2截掉了第一列和倒数第一列。<br>第二个切片则为步长为3的截取行，步长为2的截取截取列<br>注意：创造的切片只是原数组的视图，并没有创建一个新数组，改变切片也会改变原数组，这是很节省内存的做法。同理，对于arr2&#x3D;arr1的操作，也没有创建新数组，只是建立了新的绑定关系。</p><h1 id="数组的变化"><a href="#数组的变化" class="headerlink" title="数组的变化"></a>数组的变化</h1><h2 id="矩阵的转置"><a href="#矩阵的转置" class="headerlink" title="矩阵的转置"></a>矩阵的转置</h2><p>对于二维及以上的矩阵，可以直接使用np.T直接转置。</p><h2 id="数组的反转"><a href="#数组的反转" class="headerlink" title="数组的反转"></a>数组的反转</h2><p>数组有上下翻转你np.flipud()和左右翻转np.fliplr()，对于单维数组，只有上下翻转。<br><img src="/../img/numpy/8.png"></p><h2 id="数组的拼接："><a href="#数组的拼接：" class="headerlink" title="数组的拼接："></a>数组的拼接：</h2><p>对于单维数组，可以用np.concatenate(),进行拼接<br><img src="/../img/numpy/9.png"><br>对于多维数组，也用上述方法进行拼接，但是要确保维数的吻合，且根据参数axis为0&#x2F;1分为按行拼接和按列拼接。注意，向量不能和矩阵拼接，需要先转化为矩阵。<br><img src="/../img/numpy/10.png"></p><h2 id="分裂数组"><a href="#分裂数组" class="headerlink" title="分裂数组"></a>分裂数组</h2><p>对于一维数组，可以直接用<br><img src="/../img/numpy/11.png"><br>输入的索引则为截断位置<br>对于矩阵数组，依然使用np.split(),得到的结果依然为矩阵，需要标定分割的列或行，依靠axis来区分行分裂和列分裂。<br><img src="/../img/numpy/12.png"></p><h1 id="数组的运算"><a href="#数组的运算" class="headerlink" title="数组的运算"></a>数组的运算</h1><p>对于数组与常数，数组与同型数组的计算，均为逐个计算。<br><img src="/../img/numpy/13.png"><br>对于矩阵和向量运算，向量自动升级为行矩阵。若矩阵形状为(x,y),则把向量改为(1,y)的行矩阵，并广播为(x,y)的矩阵其中每一行都相同。列矩阵与向量同理，自动广播为(x,y),若是行矩阵X列矩阵，则双方均广播。    </p><h2 id="矩阵计算"><a href="#矩阵计算" class="headerlink" title="矩阵计算"></a>矩阵计算</h2><p>上述中提到的逐项相乘并不符合线性代数中矩阵乘法的定义，若想实现，则需要np.dot()来实现，规则与线性代数中相同。<br><img src="/../img/numpy/14.png"></p><h2 id="数学函数"><a href="#数学函数" class="headerlink" title="数学函数"></a>数学函数</h2><p>Numpy还提供了很多数学函数，可以对矩阵进行计算：</p><ol><li>np.abs()  &#x2F;&#x2F;绝对值</li><li>np.sin &#x2F;cos&#x2F; tan()  &#x2F;&#x2F;三角函数</li><li>np.exp()  &#x2F;&#x2F;e ^ x</li><li>np.log(x)&#x2F;np.log(n)  &#x2F;&#x2F;对数函数logn(X)</li></ol><h2 id="聚合函数"><a href="#聚合函数" class="headerlink" title="聚合函数"></a>聚合函数</h2><ol><li>np.max:在矩阵中寻找每列&#x2F;行的最大值，根据axis的值区分，axis为0时，去每列最大值，若不写axis，则求整体的最大值。</li><li>np.sun()&#x2F;np.prod():根据axis不同算出每行&#x2F;列的和&#x2F;积，axis不写则为整体的和&#x2F;积</li><li>np.mean()&#x2F;np.std():分别为求平均数和标准差，同样根据axis区分</li></ol><h1 id="布尔型数组"><a href="#布尔型数组" class="headerlink" title="布尔型数组"></a>布尔型数组</h1><p>因为布尔类型数据常由判断中产生，所以可以用正常的矩阵来生成布尔型数组：<br><img src="/../img/numpy/15.png"><br>布尔型矩阵有什么用呢？根据sum可以知道True的个数，根据np.any可以判断矩阵中是否存在True，有就返回True；np.all()则判断是否有False，有就返回False。<br><img src="/../img/numpy/16.png"></p><h1 id="数组和张量"><a href="#数组和张量" class="headerlink" title="数组和张量"></a>数组和张量</h1><p>Pytorch作为首屈一指的深度学习库，将Numpy语法吸收。基础语法几乎相同，需要将np对应torch，array对应张量tensor，n阶数组对应n阶张量。<br>ts&#x3D;torch.tensor(arr)<br>arr&#x3D;np.array(ts)<br>可以实现张量和数组的互换<br>二者具体差异为：<br><img src="/../img/numpy/17.png"></p>]]></content>
    
    
    <categories>
      
      <category>python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
      <tag>numpy</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>STL</title>
    <link href="/2025/07/18/STL-%E6%9B%B4%E6%96%B0%E4%B8%AD/"/>
    <url>/2025/07/18/STL-%E6%9B%B4%E6%96%B0%E4%B8%AD/</url>
    
    <content type="html"><![CDATA[<h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><ul><li>stl全称为Standard Template Library标准模板库</li><li>分为  <strong>容器</strong>，<strong>算法</strong>，<strong>迭代器</strong></li><li>算法和容器之间由迭代器连接</li></ul><h4 id="容器"><a href="#容器" class="headerlink" title="容器"></a>容器</h4><p>实现运用最广泛的一些数据结构(如数组.链表.树.栈.队列.集合.映射表)<br>分为<strong>序列式容器</strong>和<strong>关联式容器</strong>   </p><ul><li>序列式容器：强调值的排序，每个元素都有固定的顺序</li><li>关联式容器：二叉树结构，各元素之间没有严格的物理上的顺序关系</li></ul><h4 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h4><p>解决问题的方法</p><ul><li>质变算法：是指运算过程中会更改区间内的元素，如拷贝，替换，删除</li><li>非质变算法：指运算过程中不会更改区间内的元素内容，如查找，计数，遍历，寻找</li></ul><h4 id="迭代器："><a href="#迭代器：" class="headerlink" title="迭代器："></a>迭代器：</h4><p>提供一种方法，使之能够依序寻访某个容器所含的各个元素，不用暴露该容器内部表示方式，类似于指针</p><hr><h2 id="vector容器"><a href="#vector容器" class="headerlink" title="vector容器"></a>vector容器</h2><p>与数组十分相似，也称为单端数组，不同在于vector可以动态扩展(拷贝到更大的空间中) 构造方式</p><h4 id="构造方式"><a href="#构造方式" class="headerlink" title="构造方式"></a>构造方式</h4><p>vector&lt;&gt; v;<br>vector&lt;&gt;v2(v1.begin(),v1.end())写入两个数据，以左闭右开的形式存入容器中 vector(n,elem) 复制n个elem存入<br>vector&lt;&gt;v2(v1) 拷贝另一个vector</p><h4 id="赋值操作"><a href="#赋值操作" class="headerlink" title="赋值操作"></a>赋值操作</h4><ul><li>v1&#x3D;v2直接复制</li><li>v2.assign(v1.begin(),v1.end())</li><li>v2.assign(10,100)<br>与构造操作类似</li></ul><h4 id="容量和大小"><a href="#容量和大小" class="headerlink" title="容量和大小"></a>容量和大小</h4><p>容量&gt;元素的个数    </p><ul><li>empty()&#x2F;&#x2F;判断容器是否为空</li><li>capacity()&#x2F;&#x2F;返回容量大小</li><li>size();&#x2F;&#x2F;返回元素个数</li><li>resize(num，num)&#x2F;&#x2F;重新指定元素个数，过多则用第二个传入的num填充(不写默认0)，过短则删除超出元素</li></ul><h4 id="插入和删除"><a href="#插入和删除" class="headerlink" title="插入和删除"></a>插入和删除</h4><ul><li>v.pushback(ele)&#x2F;&#x2F;尾插新元素</li><li>v.pop_back();&#x2F;&#x2F;弹出尾元素</li><li>insert(iterator,count，ele )&#x2F;&#x2F;在指定位置插入count(默认为1)个ele</li><li>erase(iterator)删除指定元素</li><li>erase（start，end）删除区间元素（左闭右开）</li><li>clear()删除全部元素</li></ul><h4 id="数据存取"><a href="#数据存取" class="headerlink" title="数据存取"></a>数据存取</h4><ul><li>v.at(index)返回索引index所指数据</li><li>v[index] 同上</li><li>v.front()返回第一个</li><li>v.back()返回最后一个</li></ul><h4 id="互换容器"><a href="#互换容器" class="headerlink" title="互换容器"></a>互换容器</h4><ul><li>v1.swap(v2)将v1和v2的元素个数和容量互换<br>因为容器经过resize降低了元素个数，容器的容量是不会变的，导致会占用较大的空间，此时使用swap可以将多余的空间释</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt;(v).<span class="hljs-built_in">swap</span>(v)<span class="hljs-comment">//利用vector&lt;int&gt;(v)创造一个与v元素相同但容量较小的匿名对象与v交换，运行后匿名对象被销毁，收缩了空间</span><br></code></pre></td></tr></table></figure><h4 id="存放内置数据类型"><a href="#存放内置数据类型" class="headerlink" title="存放内置数据类型"></a>存放内置数据类型</h4><p>算法：for_each：<br>for_each()接收三个参数,为两个迭代器和一个函数，传入后会从第一个传入迭代器遍历到第二个传入的迭代器，并代入传入的函数。<br>迭代器：vector&lt;&gt;::iterator    </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span>  </span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span>  </span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string&gt;</span>  </span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span>  </span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;  <br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Print</span><span class="hljs-params">(<span class="hljs-type">int</span> val)</span> </span>&#123;  <br>    cout &lt;&lt; val &lt;&lt; endl;  <br>&#125;  <br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test</span><span class="hljs-params">()</span> </span>&#123;  <br>    vector&lt;<span class="hljs-type">int</span>&gt; v;  <br>    <span class="hljs-comment">//插入元素  </span><br>    v.<span class="hljs-built_in">push_back</span>(<span class="hljs-number">1</span>);  <br>    v.<span class="hljs-built_in">push_back</span>(<span class="hljs-number">2</span>);  <br>    v.<span class="hljs-built_in">push_back</span>(<span class="hljs-number">3</span>);  <br>    v.<span class="hljs-built_in">push_back</span>(<span class="hljs-number">4</span>);  <br>    vector&lt;<span class="hljs-type">int</span>&gt;::iterator vbe= v.<span class="hljs-built_in">begin</span>();  <br>    vector&lt;<span class="hljs-type">int</span>&gt;::iterator ven = v.<span class="hljs-built_in">end</span>();  <br>    <span class="hljs-comment">//遍历方式1:  </span><br>    <span class="hljs-keyword">while</span> (vbe != ven) &#123;  <br>        cout &lt;&lt; *vbe &lt;&lt;endl;  <br>        vbe++;  <br>    &#125;  <br>    cout&lt;&lt;endl;  <br>    <span class="hljs-comment">//遍历方式2:  </span><br>    for_each (v.<span class="hljs-built_in">begin</span>(), v.<span class="hljs-built_in">end</span>(), Print);  <br>&#125;  <br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;  <br>    <span class="hljs-built_in">test</span>();  <br>&#125;<br></code></pre></td></tr></table></figure><h4 id="存放自定义数据类型"><a href="#存放自定义数据类型" class="headerlink" title="存放自定义数据类型"></a>存放自定义数据类型</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span>  </span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span>  </span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string&gt;</span>  </span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span>  </span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;  <br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> &#123;  <br>    <span class="hljs-keyword">public</span>:  <br>    string name;  <br>    <span class="hljs-type">int</span> age;  <br>    <span class="hljs-built_in">Person</span>(string name, <span class="hljs-type">int</span> age) &#123;  <br>        <span class="hljs-keyword">this</span>-&gt;name = name;  <br>        <span class="hljs-keyword">this</span>-&gt;age = age;  <br>    &#125;  <br>&#125;;  <br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Print</span><span class="hljs-params">(Person &amp;p)</span> </span>&#123;  <br>    cout &lt;&lt; <span class="hljs-string">&quot;Name: &quot;</span> &lt;&lt; p.name &lt;&lt; endl;  <br>&#125;  <br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test</span><span class="hljs-params">()</span> </span>&#123;  <br>    vector&lt;Person&gt; v;  <br>    <span class="hljs-function">Person <span class="hljs-title">p1</span><span class="hljs-params">(<span class="hljs-string">&quot;John&quot;</span>, <span class="hljs-number">10</span>)</span></span>;  <br>    v.<span class="hljs-built_in">push_back</span>(p1);  <br>    <span class="hljs-function">Person <span class="hljs-title">p2</span><span class="hljs-params">(<span class="hljs-string">&quot;Ja&quot;</span>, <span class="hljs-number">20</span>)</span></span>;  <br>    v.<span class="hljs-built_in">push_back</span>(p2);  <br>    <span class="hljs-function">Person <span class="hljs-title">p3</span><span class="hljs-params">(<span class="hljs-string">&quot;Jan&quot;</span>, <span class="hljs-number">30</span>)</span></span>;  <br>    v.<span class="hljs-built_in">push_back</span>(p3);  <br>    <span class="hljs-function">Person <span class="hljs-title">p4</span><span class="hljs-params">(<span class="hljs-string">&quot;Jane&quot;</span>, <span class="hljs-number">40</span>)</span></span>;  <br>    v.<span class="hljs-built_in">push_back</span>(p4);  <br>    vector&lt;Person&gt;::iterator it = v.<span class="hljs-built_in">begin</span>();  <br>    <span class="hljs-keyword">while</span> (it != v.<span class="hljs-built_in">end</span>()) &#123;  <br>        cout &lt;&lt; (*it).name &lt;&lt;(*it).age&lt;&lt;endl;  <br>        it++;  <br>    &#125;<br></code></pre></td></tr></table></figure><hr><h2 id="String"><a href="#String" class="headerlink" title="String"></a>String</h2><h4 id="本质"><a href="#本质" class="headerlink" title="本质"></a>本质</h4><ul><li>string是一个类，内部封装了char*，是一个char* 的容器</li></ul><h4 id="构造方式-1"><a href="#构造方式-1" class="headerlink" title="构造方式"></a>构造方式</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c++">string s1;<span class="hljs-comment">//默认构造</span><br><br><span class="hljs-type">char</span>* str =<span class="hljs-string">&quot;Hello&quot;</span><br>string <span class="hljs-built_in">s2</span>(str);<span class="hljs-comment">//</span><br><br>string s4（<span class="hljs-number">10</span>,<span class="hljs-string">&#x27;a&#x27;</span>）<span class="hljs-comment">//&quot;aaaaaaaaaa&quot;</span><br></code></pre></td></tr></table></figure><h4 id="赋值操作-1"><a href="#赋值操作-1" class="headerlink" title="赋值操作"></a>赋值操作</h4>  <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c++">   string s1;<br>   s1=<span class="hljs-string">&quot;hello&quot;</span>;<br>   <br>   string s2;<br>   s2=s1;<br><br>s<span class="hljs-number">1.</span><span class="hljs-built_in">assign</span>(<span class="hljs-string">&quot;string&quot;</span>,n)<span class="hljs-comment">//s1赋值为string的前n个字符，不写默认全部</span><br></code></pre></td></tr></table></figure><h4 id="拼接操作"><a href="#拼接操作" class="headerlink" title="拼接操作"></a>拼接操作</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//重载+=操作符</span><br>string s1=<span class="hljs-string">&quot;He&quot;</span>;<br>s1+=<span class="hljs-string">&quot;llo&quot;</span>;<span class="hljs-comment">//s1=&quot;Hello&quot;</span><br><br><span class="hljs-comment">//append(string,pos,n)追加pos后n个字符，pos不写默认为0，都不写默认全部</span><br>s<span class="hljs-number">1.</span><span class="hljs-built_in">append</span>(<span class="hljs-string">&quot; Worldabcd&quot;</span>,<span class="hljs-number">0</span>,<span class="hljs-number">6</span>);<span class="hljs-comment">//s1=&quot;Hello World&quot;</span><br></code></pre></td></tr></table></figure><h4 id="查找"><a href="#查找" class="headerlink" title="查找"></a>查找</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c++">string s1=<span class="hljs-string">&quot;abcdefg&quot;</span>;<br><span class="hljs-comment">//利用find()函数，从左往右查找，返回值为对应字串第一个字符的下标，没有则为-1</span><br>s<span class="hljs-number">1.f</span>ind(<span class="hljs-string">&quot;de&quot;</span>);<br><span class="hljs-comment">//rfind()则为从右向左查找，其余与find相同</span><br>s<span class="hljs-number">1.</span><span class="hljs-built_in">rfind</span>(<span class="hljs-string">&quot;de&quot;</span>)<br></code></pre></td></tr></table></figure><h4 id="替换"><a href="#替换" class="headerlink" title="替换"></a>替换</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c++">string s1=<span class="hljs-string">&quot;abcdefg&quot;</span>;<br><span class="hljs-comment">//使用replace(pos,n,string)实现</span><br><span class="hljs-comment">//从pos开始n个字符由string代替</span><br>s<span class="hljs-number">1.</span><span class="hljs-built_in">replace</span>(<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-string">&quot;1111&quot;</span>)<span class="hljs-comment">//s1变为(a1111efg)</span><br></code></pre></td></tr></table></figure><h4 id="比较"><a href="#比较" class="headerlink" title="比较"></a>比较</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c++">string s1=<span class="hljs-string">&quot;abcdefg&quot;</span>;<br>string s2=<span class="hljs-string">&quot;abcdefg&quot;</span>;<br><span class="hljs-comment">//使用compare实现，按照字符的ASC码对比，根据大小返回值分别为0,1,-1;</span><br>s<span class="hljs-number">1.</span><span class="hljs-built_in">compare</span>(s2)<br></code></pre></td></tr></table></figure><h4 id="单个字符存取"><a href="#单个字符存取" class="headerlink" title="单个字符存取"></a>单个字符存取</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c++">string s1=<span class="hljs-string">&quot;abcdefg&quot;</span>;<br>s1[<span class="hljs-number">1</span>]<span class="hljs-comment">//&#x27;b&#x27;</span><br>s<span class="hljs-number">1.</span><span class="hljs-built_in">at</span>(<span class="hljs-number">1</span>)<span class="hljs-comment">//&#x27;b&#x27;</span><br></code></pre></td></tr></table></figure><h4 id="插入删除"><a href="#插入删除" class="headerlink" title="插入删除"></a>插入删除</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c++">string s1=<span class="hljs-string">&quot;abcdefg&quot;</span>;<br>s<span class="hljs-number">1.</span><span class="hljs-built_in">insert</span>(pos,string)<span class="hljs-comment">//在pos位置插入string</span><br>s<span class="hljs-number">1.</span><span class="hljs-built_in">insert</span>(pos,n,<span class="hljs-type">char</span>)<span class="hljs-comment">//在pos位置插入n个char</span><br>s<span class="hljs-number">1.</span><span class="hljs-built_in">erase</span>(pos，n)<span class="hljs-comment">//删除pos开始的n个字符</span><br></code></pre></td></tr></table></figure><h4 id="子串获取"><a href="#子串获取" class="headerlink" title="子串获取"></a>子串获取</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c++">string s1=<span class="hljs-string">&quot;abcdefg&quot;</span>;<br>s2=s<span class="hljs-number">1.</span><span class="hljs-built_in">substr</span>(pos,n)<span class="hljs-comment">//返回由s1pos位置开始的n个字符组成的字符串</span><br></code></pre></td></tr></table></figure><hr><h2 id="deque"><a href="#deque" class="headerlink" title="deque"></a>deque</h2><h4 id="基本概念-1"><a href="#基本概念-1" class="headerlink" title="基本概念"></a>基本概念</h4><p>双端数组，头部尾部都可以进行插入删除 ，但访问元素比vector慢</p><h4 id="构造与赋值"><a href="#构造与赋值" class="headerlink" title="构造与赋值"></a>构造与赋值</h4><p>与vector完全相同</p><h4 id="大小操作"><a href="#大小操作" class="headerlink" title="大小操作"></a>大小操作</h4><p>与vector相同，但deque没有容量(capacity)的概念</p><h4 id="插入和删除-1"><a href="#插入和删除-1" class="headerlink" title="插入和删除"></a>插入和删除</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c++">deque&lt;<span class="hljs-type">int</span>&gt; d1;<br>d<span class="hljs-number">1.</span><span class="hljs-built_in">push_back</span>(ele);<span class="hljs-comment">//尾插</span><br>d<span class="hljs-number">1.</span><span class="hljs-built_in">push_front</span>(ele);<span class="hljs-comment">//头插</span><br>d<span class="hljs-number">1.</span><span class="hljs-built_in">pop_back</span>();<span class="hljs-comment">//删除最后一个数据</span><br>d<span class="hljs-number">1.</span><span class="hljs-built_in">pop_front</span>();<span class="hljs-comment">//删除第一个数据</span><br><br>d<span class="hljs-number">1.</span><span class="hljs-built_in">insert</span>(pos,n,ele);<span class="hljs-comment">//pos位置插入n个ele</span><br>d<span class="hljs-number">1.</span><span class="hljs-built_in">insert</span>(pos,beg,end);<span class="hljs-comment">//pos位置插入[beg,end)区间数据</span><br>d<span class="hljs-number">1.</span><span class="hljs-built_in">clear</span>();<span class="hljs-comment">//清空</span><br>d<span class="hljs-number">1.</span><span class="hljs-built_in">erase</span>(beg,end);<span class="hljs-comment">//删除[)区间的数据，返回下一个数据的位置</span><br>d<span class="hljs-number">1.</span><span class="hljs-built_in">erase</span>(pos)<span class="hljs-comment">//删除pos位置的数据，返回下一个数据位置</span><br></code></pre></td></tr></table></figure><p>注意，当需要传入位置时，只能用迭代器，不能用索引</p><h4 id="数据存取-1"><a href="#数据存取-1" class="headerlink" title="数据存取"></a>数据存取</h4><p>与vector相同</p><hr><h2 id="stack栈"><a href="#stack栈" class="headerlink" title="stack栈"></a>stack栈</h2><h4 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h4><p>stack只有一个入口，是一种先进后出的数据结构，只能访问到最后进栈(顶端)的数据</p><h4 id="常用操作"><a href="#常用操作" class="headerlink" title="常用操作"></a>常用操作</h4><ol><li>构造：</li></ol><ul><li>stack&lt;&gt; st;</li><li>stack&lt;&gt; st2(st);&#x2F;&#x2F;拷贝</li></ul><ol start="2"><li>赋值：</li></ol><ul><li>stack&lt;&gt; st3 &#x3D; st;</li></ul><ol start="3"><li>数据存取:</li></ol><ul><li>st.push(ele)&#x2F;&#x2F;添加元素</li><li>st.pop()&#x2F;&#x2F;弹出栈顶元素</li><li>st.top()&#x2F;&#x2F;返回栈顶元素、</li></ul><ol start="4"><li>大小操作</li></ol><ul><li>st.empty() </li><li>st.size()&#x2F;&#x2F;元素个数</li></ul><h2 id="queue队列"><a href="#queue队列" class="headerlink" title="queue队列"></a>queue队列</h2><p>先进先出，队尾进，队头出、<br>常见操作参考stack</p><h2 id="list链表"><a href="#list链表" class="headerlink" title="list链表"></a>list链表</h2><h4 id="概念-1"><a href="#概念-1" class="headerlink" title="概念"></a>概念</h4><p>链表由一系列结点组成，每一个结点又由数据域和指针域组成。STL中的链表是双向循环链表 </p><h4 id="插入和删除数据"><a href="#插入和删除数据" class="headerlink" title="插入和删除数据"></a>插入和删除数据</h4><p><img src="/../img/stl/11.png"></p><h4 id="数据存取-2"><a href="#数据存取-2" class="headerlink" title="数据存取"></a>数据存取</h4><p>由于链表并不支持随机访问，所以不支持at或[]来访问，只能用迭代器且不能跳跃当问，只能++或–来移动</p><h4 id="反转和排序"><a href="#反转和排序" class="headerlink" title="反转和排序"></a>反转和排序</h4><ul><li>反转：<br>采用reverse方法，直接将链表反转<br><img src="/../img/stl/12.png"></li><li>排序<br>使用list的成员函数sort可以直接实现顺序排序<br><img src="/../img/stl/2.png"><br>如果想实现逆序排序，需要自行添加判断方式函数<br><img src="/../img/stl/3.png"></li></ul><h2 id="set集合"><a href="#set集合" class="headerlink" title="set集合"></a>set集合</h2><h4 id="基本概念-2"><a href="#基本概念-2" class="headerlink" title="基本概念"></a>基本概念</h4><p>属于关联式容器，底层结构是用二叉树实现，所有元素插入时自动排序。set不允许出现重复的容器，multiset允许。</p><h4 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h4><ul><li>构造：<br>set&lt;&gt; st;<br>set(st);&#x2F;&#x2F;拷贝构造</li><li>赋值：<br>st1&#x3D;st2；</li><li>大小：<br>st.size();&#x2F;&#x2F;返回元素个数<br>st.empty();&#x2F;&#x2F;是否为空<br>st.swap(st1);&#x2F;&#x2F;交换</li></ul><h4 id="插入和删除-2"><a href="#插入和删除-2" class="headerlink" title="插入和删除"></a>插入和删除</h4><ul><li>insert(elem)&#x2F;&#x2F;插入元素</li><li>clear()&#x2F;&#x2F;全部清除</li><li>erase(pos)&#x2F;&#x2F;删除pos指定元素，返回下一个元素的迭代器</li><li>erase(beg,end)&#x2F;&#x2F;删除区间元素</li><li>erase(elem)&#x2F;&#x2F; 删除elem</li></ul><h4 id="查找和统计"><a href="#查找和统计" class="headerlink" title="查找和统计"></a>查找和统计</h4><ul><li>find(ele)&#x2F;&#x2F;查找是否存在，存在返回该元素的迭代器，不存在返回end()</li><li>count(ele);&#x2F;&#x2F;统计元素个数</li></ul><h4 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h4><p>set默认为从小到大排序，我们也可以自行更改排序方式<br><img src="/../img/stl/13.png"><br>利用仿函数重载(),在构造set时改变insert的插入顺序。<br>由于自己定义的类想要放到集合中，由于数据的多样，set并不能知道按照什么排序，所以必须自己定义排序方式，同样使用仿函数。<img src="/../img/stl/11.png"><br><img src="/../img/stl/14.png"></p><h2 id="map容器"><a href="#map容器" class="headerlink" title="map容器"></a>map容器</h2><h4 id="基本概念-3"><a href="#基本概念-3" class="headerlink" title="基本概念"></a>基本概念</h4><p>map中所有元素都是pair(第一个元素为key起索引作用，第二个元素为value，作为实值)，且元素会根据key自动排序，map不允许有复key值，multimap允许。<br>map也属于关联式容器，二叉树实现<br>根据key可以快速找到value   </p><h4 id="构造"><a href="#构造" class="headerlink" title="构造"></a>构造</h4><p>与正常容器构造相似，但因为有两个数据，所以要规定两种数据类型：</p><ul><li>map&lt; , &gt; m1;</li></ul><h4 id="大小和交换"><a href="#大小和交换" class="headerlink" title="大小和交换"></a>大小和交换</h4><p>与set容器相同</p><h4 id="插入和删除-3"><a href="#插入和删除-3" class="headerlink" title="插入和删除"></a>插入和删除</h4><ul><li>m.insert(pair&lt; , &gt;( , ))</li><li>m.insert(make_pair( , ))</li><li>m[key]&#x3D;value&#x2F;&#x2F;不推荐用于插入，用于访问value比较合适<br><img src="/../img/stl/4.png"></li><li>erase()可以填入迭代器&#x2F;区间&#x2F;key，都可以达到删除的作用</li><li>同样，clear依然奏效</li></ul><h4 id="查找和统计-1"><a href="#查找和统计-1" class="headerlink" title="查找和统计"></a>查找和统计</h4><ul><li>m.find(key)&#x2F;&#x2F;返回对应迭代器，若无则为m.end()</li><li>m.count(key)&#x2F;&#x2F;返回元素个数，对于map0或1</li></ul><h4 id="排序-1"><a href="#排序-1" class="headerlink" title="排序"></a>排序</h4><p>map与set类似，会根据key的大小自动排序，同样，也可以通过仿函数来自定义排序的方式    <img src="/../img/stl/5.png"></p><p>注意，因为map是按照key来排序的，如果想要按照自定义类的某个数据排序，必须让他来当key</p>]]></content>
    
    
    <categories>
      
      <category>c++</category>
      
    </categories>
    
    
    <tags>
      
      <tag>cs</tag>
      
      <tag>c++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>c++类与对象</title>
    <link href="/2025/07/15/c++%E7%B1%BB%E4%B8%8E%E5%AF%B9%E8%B1%A1/"/>
    <url>/2025/07/15/c++%E7%B1%BB%E4%B8%8E%E5%AF%B9%E8%B1%A1/</url>
    
    <content type="html"><![CDATA[<p>面向对象的三大特性：封装，继承，多态<br>具有相同性质的对象，抽象为一个类。例如狗属于狗类</p><h2 id="封装："><a href="#封装：" class="headerlink" title="封装："></a>封装：</h2><ol><li>将属性和行为作为一个整体，表现生活中的事物</li><li>属性和行为加以权限控制</li></ol><h3 id="为什么要封装？"><a href="#为什么要封装？" class="headerlink" title="为什么要封装？"></a>为什么要封装？</h3><ol><li>设计类的时候，可以将属性和行为写在一起<br>类的定义：</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Circle</span> &#123;  <br>    (权限)<span class="hljs-keyword">public</span>:  <br>    (属性)<span class="hljs-type">int</span> radius;  <br>    (行为)<span class="hljs-type">double</span> cal &#123;  <br>        <span class="hljs-keyword">return</span> radius * radius* <span class="hljs-number">3.14159</span>;  <br>    &#125;  <br>&#125;;<br></code></pre></td></tr></table></figure><ol start="2"><li>设计类时，可以把属性和行为放在不同权限下控制：<br>三种权限分别为：<br>公共权限public:类内可访问，类外可访问     <br>保护protected:类内可，类外不可<br>私有private:类内可，类外不可</li></ol><hr><h3 id="struct和class的区别："><a href="#struct和class的区别：" class="headerlink" title="struct和class的区别："></a>struct和class的区别：</h3><p>struct默认为公共权限，class默认为私有权限。</p><hr><p>既然私有权限在类外不能访问，那么这种权限设置有什么好处呢？<br>通过行为的设置，可以实现对属性的只读&#x2F;写</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Stu</span> &#123;  <br><span class="hljs-keyword">private</span>:  <br>    string name;  <br>    string id;  <br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">read</span><span class="hljs-params">()</span> </span>&#123;  <br>        cout&lt;&lt;<span class="hljs-string">&quot;名字是:&quot;</span>&lt;&lt;name&lt;&lt;<span class="hljs-string">&quot;学号为:&quot;</span>&lt;&lt;id&lt;&lt;endl;  <br>    &#125;  <br><span class="hljs-keyword">public</span>:  <br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">write</span><span class="hljs-params">(string str)</span> </span>&#123;  <br>        name = str;  <br>    &#125;  <br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">showname</span><span class="hljs-params">()</span> </span>&#123;  <br>        cout&lt;&lt;<span class="hljs-string">&quot;名为:&quot;</span>&lt;&lt;name&lt;&lt;endl;  <br>    &#125;  <br>&#125;;<br></code></pre></td></tr></table></figure><p>如上，可以通过设为公共权限的行为，对类的属性进行可读或可写的操作，那为什么不直接都设为公共权限再设置呢？    假设我们将属性定为了一个不可能取得的数据，例如年龄设为200，显然是不可能的，就可以在类内进行数据检查及时反馈，防止传入无效的数据。    </p><hr><h2 id="对象的初始化和清理："><a href="#对象的初始化和清理：" class="headerlink" title="对象的初始化和清理："></a>对象的初始化和清理：</h2><p>如果不对对象设置初始状态，使用后果是未知的；使用后不进行清理，也有安全问题。<br>c++中存在构造函数和析构函数，这两个函数回被自动调用，完成初始化和清理，如果不提供，会调用编译器提供好的函数，是空实现。（所以这一过程是必然进行的）</p><ul><li>构造函数：<br>没用返回值    函数名与类名相同<br>构造函数可以有参数    自动调用一次    </li><li>析构函数：<br>无返回值   函数名为～类名<br>不可有参数  自动调用</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span><br>&#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-built_in">Person</span>()<br>&#123;<br>cout&lt;&lt;<span class="hljs-string">&quot;Person构造函数的调用&quot;</span>&lt;&lt;endl；<br>&#125;<br>～<span class="hljs-built_in">Person</span>()<br>&#123;<br>cout&lt;&lt;<span class="hljs-string">&quot;Person的析构函数调用&quot;</span>&lt;&lt;endl;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><hr><h2 id="构造函数的分类及调用"><a href="#构造函数的分类及调用" class="headerlink" title="构造函数的分类及调用"></a>构造函数的分类及调用</h2><p>按照参数分为无参函数和有参函数<br>按照类型分为普通构造和拷贝构造    </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span>  <br>&#123;  <br><span class="hljs-keyword">public</span>:  <br>    <span class="hljs-built_in">Person</span>()  <br>    &#123;  <br>        cout&lt;&lt;<span class="hljs-string">&quot;Person构造函数的调用&quot;</span>&lt;&lt;endl;  <br>    &#125;  <br>    <span class="hljs-built_in">Person</span>(string str) &#123;  <br>        name = str;  <br>        cout&lt;&lt;<span class="hljs-string">&quot;Person构造函数的调用&quot;</span>&lt;&lt;name&lt;&lt;endl;  <br>    &#125;  <br>    <span class="hljs-built_in">Person</span>(Person &amp;p) &#123;  <br>        name = p.name;  <br>        cout&lt;&lt;<span class="hljs-string">&quot;Person构造函数的调用&quot;</span>&lt;&lt;name&lt;&lt;endl;  <br>    &#125;  <br>    ~<span class="hljs-built_in">Person</span>()  <br>    &#123;  <br>        cout&lt;&lt;<span class="hljs-string">&quot;Person构造函数的调用&quot;</span>&lt;&lt;endl;  <br>    &#125;  <br>    string name;  <br>&#125;;```<br>调用：    <br>```c++<br>括号法：<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">display</span><span class="hljs-params">()</span> </span>&#123;  <br>    Person p1;  <br>    <span class="hljs-function">Person <span class="hljs-title">p2</span><span class="hljs-params">(<span class="hljs-string">&quot;sylvia&quot;</span>)</span></span>;  <br>    <span class="hljs-function">Person <span class="hljs-title">p3</span><span class="hljs-params">(p2)</span></span>;  <br>&#125;  <br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;  <br>    <span class="hljs-built_in">display</span>();  <br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/../img/load.png" alt="运行结果"><br>注意：当对象作为参数传入函数或者作为函数返回值时，会调用拷贝构造函数    </p><hr><h2 id="构造函数调用规则"><a href="#构造函数调用规则" class="headerlink" title="构造函数调用规则"></a>构造函数调用规则</h2><p>c++会提供默认构造函数，析构参数，拷贝构造函数<br>如果提供有参构造函数，不提供无参构造；如果定义拷贝构造函数，不提供任何构造函数。<br>注意：如果没有构造函数程序不能运行  </p><hr><h2 id="深拷贝与浅拷贝"><a href="#深拷贝与浅拷贝" class="headerlink" title="深拷贝与浅拷贝"></a>深拷贝与浅拷贝</h2><p>浅拷贝☞在拷贝构造时简单的数值拷贝，当属性中包含指针时，两个对象的属性指向是相同的，在析构时，同一片地址会被释放两次，造成错误，这时就需要深拷贝，自行创造一个新空间来存储。</p><h2 id="初始化列表"><a href="#初始化列表" class="headerlink" title="初始化列表"></a>初始化列表</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-keyword">class</span> <span class="hljs-title">Person</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">int</span> a,b,c;<br><span class="hljs-built_in">Person</span>(): <span class="hljs-built_in">a</span>(<span class="hljs-number">10</span>),<span class="hljs-built_in">b</span>(<span class="hljs-number">20</span>),<span class="hljs-built_in">c</span>(<span class="hljs-number">30</span>)<br>&#123;&#125;<br><span class="hljs-built_in">Person</span>(<span class="hljs-type">int</span> a,<span class="hljs-type">int</span> b,<span class="hljs-type">int</span> c)<span class="hljs-built_in">a</span>(a),<span class="hljs-built_in">b</span>(b),<span class="hljs-built_in">c</span>(c)<br>&#123;&#125;<br></code></pre></td></tr></table></figure><hr><h2 id="类对象作为类成员"><a href="#类对象作为类成员" class="headerlink" title="类对象作为类成员"></a>类对象作为类成员</h2><p>例如人作为一类，所持有的手机作为一个属性，而手机也是一个类，有不同型号，所以手机作为类对象，可以作为人类的类成员：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Phone</span> &#123;  <br>    <span class="hljs-keyword">public</span>:  <br>    string name;  <br>    <span class="hljs-built_in">Phone</span>(string str) &#123;  <br>        name=str;  <br>        cout&lt;&lt;<span class="hljs-string">&quot;Phone构造函数&quot;</span>&lt;&lt;endl;  <br>    &#125;  <br>    ~<span class="hljs-built_in">Phone</span>() &#123;  <br>        cout&lt;&lt;<span class="hljs-string">&quot;Phone&lt;UNK&gt;&quot;</span>&lt;&lt;endl;  <br>    &#125;  <br>&#125;;  <br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> &#123;  <br>    <span class="hljs-keyword">public</span>:  <br>    Phone a;  <br>    <span class="hljs-type">int</span> age;  <br>    <span class="hljs-built_in">Person</span>(string str,<span class="hljs-type">int</span> a):<span class="hljs-built_in">a</span>(str),<span class="hljs-built_in">age</span>(a) &#123;  <br>        cout&lt;&lt;<span class="hljs-string">&quot;Person构造函数&quot;</span>&lt;&lt;endl;  <br>    &#125;  <br>    ~<span class="hljs-built_in">Person</span>() &#123;  <br>        cout&lt;&lt;<span class="hljs-string">&quot;Person&lt;UNK&gt;&quot;</span>&lt;&lt;endl;  <br>    &#125;  <br>&#125;;<br></code></pre></td></tr></table></figure><p>注意，这里的运行结果中，Phone构造函数会第一个打印， 可知，会优先构造成员类，在构造对象类。   </p><hr><h2 id="静态成员"><a href="#静态成员" class="headerlink" title="静态成员"></a>静态成员</h2><p>静态成员是在成员变量前加上static，有以下特点：</p><ol><li>所有对象共享同一个数据</li><li>编译阶段分配内存</li><li>类内声明，类外初始化<br>同时，因为所有对象都共享同一份数据，所以也可以直接用类名来访问到静态成员。</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> &#123;  <br>    <span class="hljs-keyword">public</span>:  <br>    <span class="hljs-type">static</span> <span class="hljs-type">int</span> a; <span class="hljs-comment">//声明 </span><br>&#125;;  <br><span class="hljs-type">int</span> Person::a=<span class="hljs-number">10</span>;  <span class="hljs-comment">//初始化</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test</span><span class="hljs-params">()</span> </span>&#123;  <br>    Person x;  <br>    cout &lt;&lt; x.a &lt;&lt; endl;  <br>    Person y;  <br>    y.a=<span class="hljs-number">20</span>;  <br>    cout &lt;&lt; x.a &lt;&lt; endl; <br>    cout &lt;&lt;Person::a&lt;&lt;endl; <br>&#125;<br></code></pre></td></tr></table></figure><h2 id="静态成员函数："><a href="#静态成员函数：" class="headerlink" title="静态成员函数："></a>静态成员函数：</h2><p>与静态成员相似，静态成员函数可以被所有对象访问，也可以通过类名直接访问    </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c++"><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> &#123;  <br>    <span class="hljs-keyword">public</span>:  <br>    <span class="hljs-function"><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title">func</span><span class="hljs-params">()</span></span><br><span class="hljs-function">    </span>&#123;<br>    cout&lt;&lt;<span class="hljs-string">&quot;静态成员函数调用&quot;</span>&lt;&lt;endl;<br>    &#125;<br>&#125;;  <br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test</span><span class="hljs-params">()</span> </span>&#123;  <br>    Person x;  <br>    x.<span class="hljs-built_in">func</span>();<br>    Person::<span class="hljs-built_in">func</span>();  <br>&#125;<br></code></pre></td></tr></table></figure><p>此外，静态成员函数只能访问静态成员变量，不能访问非静态成员变量。因为每个对象都可以调用静态成员函数，假设静态成员函数中要访问某个非静态成员，那就不能判断这个成员属于哪个对象。</p><hr><p>在一个类中，成员变量和成员函数是分开存储的，对于每个对象，都有一块内存去存储他的非静态成员变量，而成员函数则是只存储一份，所以当用sizeof计算某个对象的大小时，只会计算非静态成员变量的大小，那么成员函数只有一份，不同对象调用时是怎么分开的呢？</p><h2 id="this指针："><a href="#this指针：" class="headerlink" title="this指针："></a>this指针：</h2><p>this指针指向调用成员函数的对象，不需定义，直接使用<br>用途：    </p><ol><li>当形参与实参名字相同时。可以用this指针指向实参进行区分    </li><li>返回对象本身</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> &#123;  <br>    <span class="hljs-keyword">public</span>:  <br>    <span class="hljs-type">int</span> age;  <br>    <span class="hljs-built_in">Person</span>(<span class="hljs-type">int</span> age) &#123;  <br>        <span class="hljs-keyword">this</span>-&gt;age=age;  <br>    &#125;  <br>    <span class="hljs-function">Person&amp; <span class="hljs-title">process</span><span class="hljs-params">(Person&amp; p)</span> <span class="hljs-comment">//注意是Person&amp;&#123;  </span></span><br><span class="hljs-function">        <span class="hljs-keyword">this</span>-&gt;age+</span>=p.age;  <br>        <span class="hljs-keyword">return</span> *<span class="hljs-keyword">this</span>;  <br>    &#125;  <br>&#125;;  <br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;  <br>    <span class="hljs-function">Person <span class="hljs-title">p</span><span class="hljs-params">(<span class="hljs-number">10</span>)</span></span>;  <br>    <span class="hljs-function">Person <span class="hljs-title">q</span><span class="hljs-params">(<span class="hljs-number">20</span>)</span></span>;  <br>    q.<span class="hljs-built_in">process</span>(p);  <br>    cout &lt;&lt; q.age &lt;&lt; <span class="hljs-string">&quot;\n&quot;</span>;  <br>&#125;<br></code></pre></td></tr></table></figure><p>this指针也可能是空指针，所以在使用前最好要判断一下。<br>对象的this指针为指针常量，其指向是不可改变的，（Person * const this），但其指向的值是可以改变的    如果想要设为不可改变</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-type">int</span> a；<br><span class="hljs-keyword">mutable</span> <span class="hljs-type">int</span> b;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">showPerson</span><span class="hljs-params">()</span> <span class="hljs-type">const</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">this</span>-&gt;a=<span class="hljs-number">100</span><span class="hljs-comment">//这就是错误的</span><br><span class="hljs-comment">//有了mutable即便如此也可以更改</span><br>&#125;<br></code></pre></td></tr></table></figure><p>常函数：</p><ol><li>成员函数后+const后称为常函数</li><li>常函数内不可修改成员属性</li><li>属性+mutable仍然可以修改<br>常对象：</li><li>声明对象前+const称为常对象</li><li>常对象只能调用常函数</li></ol><hr><h2 id="友元"><a href="#友元" class="headerlink" title="友元"></a>友元</h2><p>有些私有属性，想让类外特殊的一些函数或者类进行访问，需要用到友元。<br>友元可以让一个函数或者类访问另一个类中私有成员。<br>友元的实现：    </p><ul><li>全局函数做友元</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Building</span><span class="hljs-comment">//房屋  </span><br>&#123;  <br>    <span class="hljs-function"><span class="hljs-keyword">friend</span> <span class="hljs-type">void</span> <span class="hljs-title">fri</span><span class="hljs-params">(Building &amp;building)</span></span>;  <br>    <span class="hljs-keyword">public</span>:  <br>    <span class="hljs-built_in">Building</span>() &#123;  <br>        m_SittingRoom=<span class="hljs-string">&quot;客厅&quot;</span>;  <br>        m_Bedroom=<span class="hljs-string">&quot;卧室&quot;</span>;  <br>    &#125;  <br>    string m_SittingRoom;  <br><span class="hljs-keyword">private</span>:  <br>    string m_Bedroom;  <br>&#125;;  <br><span class="hljs-comment">//全局函数  </span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">fri</span><span class="hljs-params">(Building &amp;building)</span> </span>&#123;  <br>    cout&lt;&lt;<span class="hljs-string">&quot;朋友可以访问:&quot;</span>&lt;&lt;building.m_SittingRoom&lt;&lt;endl;  <br>    cout&lt;&lt;<span class="hljs-string">&quot;朋友可以访问:&quot;</span>&lt;&lt;building.m_Bedroom&lt;&lt;endl;  <br>  <br>&#125;  <br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test</span><span class="hljs-params">()</span> </span>&#123;  <br>    Building building;  <br>    <span class="hljs-built_in">fri</span>(building);  <br>&#125;<br></code></pre></td></tr></table></figure><p>需要在类前用friend声明全局函数</p><ul><li>类做友元：</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Building</span><span class="hljs-comment">//房屋  </span><br>&#123;  <br>    <span class="hljs-keyword">friend</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">fri</span>;  <br>    <span class="hljs-function"><span class="hljs-keyword">friend</span> <span class="hljs-type">void</span> <span class="hljs-title">fri</span><span class="hljs-params">(Building &amp;building)</span></span>;  <br>    <span class="hljs-keyword">public</span>:  <br>    <span class="hljs-built_in">Building</span>() &#123;  <br>        m_SittingRoom=<span class="hljs-string">&quot;客厅&quot;</span>;  <br>        m_Bedroom=<span class="hljs-string">&quot;卧室&quot;</span>;  <br>    &#125;  <br>    string m_SittingRoom;  <br><span class="hljs-keyword">private</span>:  <br>    string m_Bedroom;  <br>&#125;;  <br><span class="hljs-keyword">class</span> <span class="hljs-title class_">fri</span> &#123;  <br>    <span class="hljs-keyword">public</span>:  <br>    Building building;  <br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">visit</span><span class="hljs-params">()</span> </span>&#123;  <br>        cout&lt;&lt;<span class="hljs-string">&quot;正在访问：&quot;</span>&lt;&lt;building.m_SittingRoom&lt;&lt;endl;  <br>        cout&lt;&lt;<span class="hljs-string">&quot;正在访问：&quot;</span>&lt;&lt;building.m_Bedroom&lt;&lt;endl;  <br>    &#125;  <br>&#125;;   <br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test</span><span class="hljs-params">()</span> </span>&#123;  <br>    fri gg;  <br>    gg.<span class="hljs-built_in">visit</span>();  <br>&#125;<br></code></pre></td></tr></table></figure><ul><li>成员函数做友元：</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Building</span><br>&#123;<br><span class="hljs-function"><span class="hljs-keyword">friend</span> <span class="hljs-type">void</span> <span class="hljs-title">fri::visit</span><span class="hljs-params">()</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure><hr><h2 id="运算符重载"><a href="#运算符重载" class="headerlink" title="运算符重载"></a>运算符重载</h2><p>对于内置的数据类型，编译器知道如何处理，例如1+1编译器是会处理的，那如果是想要实现某一对象的属性相加减，就需要重新设计函数来调用，此时就可以重载运算符</p><h4 id="加号"><a href="#加号" class="headerlink" title="加号:"></a>加号:</h4><p>定义函数时，把函数名改为operator+即可，注意，如果传入的参数类型不同，可以实现多个operator+</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c++">Person <span class="hljs-keyword">operator</span>+(Person &amp;p,Person &amp;s)<br>&#123;<br>Person temp；<br>temp.a=p.a+s.a;<br><span class="hljs-keyword">return</span> temp;<br>&#125;<br>Person <span class="hljs-keyword">operator</span>+(Person &amp;p,<span class="hljs-type">int</span> num)<br>&#123;<br>Person temp；<br>temp.a=p.a+num;<br><span class="hljs-keyword">return</span> temp;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="递增："><a href="#递增：" class="headerlink" title="递增："></a>递增：</h4><p>由于递增有两种形式，分别为++a和a++，显然不能在同一函数中就定义完美，所以规定operater++()为前置++，operator++(int)为后置++</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c++">Person&amp; <span class="hljs-keyword">operator</span>++()<br>&#123;<br>a++;<br><span class="hljs-keyword">return</span> *<span class="hljs-keyword">this</span>;<br>&#125;<br>Person <span class="hljs-keyword">operator</span>++(<span class="hljs-type">int</span>)<br>&#123;<br>Person temp=*<span class="hljs-keyword">this</span>;<br>a++;<br><span class="hljs-keyword">return</span> temp;<br>&#125;<br></code></pre></td></tr></table></figure><p>注意，前置++要返回原对象，如果函数类型定义成Person，相当于拷贝。而后置++则是先保存原数据再++并返回原数据。</p><h4 id="赋值："><a href="#赋值：" class="headerlink" title="赋值："></a>赋值：</h4><p>赋值主要是涉及到深浅拷贝的区别</p><h4 id="关系运算符："><a href="#关系运算符：" class="headerlink" title="关系运算符："></a>关系运算符：</h4><p>&#x3D;&#x3D; 和！&#x3D;，与上述方式相同</p><h2 id="继承："><a href="#继承：" class="headerlink" title="继承："></a>继承：</h2><p>当一个类中又能细分出不同的类时，这些子类拥有部分相同的属性或者行为，在代码中如果重复定义会很麻烦，所以可以再父类中定义再让子类继承：<br>对于子类A和父类B，继承方式为：<br>class A：public B{}；</p><h4 id="继承方式"><a href="#继承方式" class="headerlink" title="继承方式"></a>继承方式</h4><p>注意：父类隐私权限下的属性行为，子类无法继承<br>继承方式分为    </p><ul><li>公共继承：父类的公共权限，保护权限，在子类中保留class A：public B{}；</li><li>保护继承：都改为保护权限   class A：protected B{}；</li><li>私有继承：都改为隐私权限class A：private B{}；</li></ul><h4 id="继承中构造顺序"><a href="#继承中构造顺序" class="headerlink" title="继承中构造顺序"></a>继承中构造顺序</h4><p>当构造一个子类对象时，会首先构造父类再构造子类。</p><h4 id="同名成员的访问方式"><a href="#同名成员的访问方式" class="headerlink" title="同名成员的访问方式"></a>同名成员的访问方式</h4><p>如果子类和父类中出现同名的属性，可以直接调用子类的属性，父类则需要写明作用域。<br>A.B::a;<br>同名成员函数同理A.B::func();     </p><hr><h2 id="多态："><a href="#多态：" class="headerlink" title="多态："></a>多态：</h2><ul><li>静态多态：函数重载和运算符重载属于静态多态   地址早绑定，编译阶段确定函数地址      </li><li>派生类和虚函数实现运行时多态 地址晚绑定 运行阶段确定函数地址</li></ul><h4 id="虚函数"><a href="#虚函数" class="headerlink" title="虚函数"></a>虚函数</h4><p>看如下代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Animals</span> &#123;  <br>    <span class="hljs-keyword">public</span>:  <br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">speak</span><span class="hljs-params">()</span> </span>&#123;  <br>        cout &lt;&lt; <span class="hljs-string">&quot;动物在说话&quot;</span> &lt;&lt; endl;  <br>    &#125;  <br>&#125;;  <br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Cat</span>: <span class="hljs-keyword">public</span> Animals&#123;  <br>    <span class="hljs-keyword">public</span>:  <br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">speak</span><span class="hljs-params">()</span> </span>&#123;  <br>        cout &lt;&lt; <span class="hljs-string">&quot;喵喵喵&quot;</span> &lt;&lt; endl;  <br>    &#125;  <br>&#125;;  <br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">dospeak</span><span class="hljs-params">(Animals &amp;animals)</span> </span>&#123;  <br>    animals.<span class="hljs-built_in">speak</span>();  <br>&#125;  <br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test</span><span class="hljs-params">()</span> </span>&#123;  <br>    Cat cat;  <br>    <span class="hljs-built_in">dospeak</span>(cat);  <br>&#125;<br></code></pre></td></tr></table></figure><p>我们定义了父类Animals并让cat子类继承他，且都定义了speak行为。又定义了接受Animal类对象的dospeak函数来调用speak，而我们将Cat类对象cat传入后依然可以运行（可知c++是支持父子类对象相互转化的），那么此时的speak是Animal的还是cat呢？运行结果如下：<img src="/../img/duotai.png"><br>为什么是Animal的呢？这是因为在编译阶段dospeak中的speak地址就是已经确定的，不管传入什么动物，都会执行Animal的speak。<br>如果我们想要的是Cat的speak该怎么做呢，首先我们要让dospeak的地址不要提前绑定，而是运行时视情况而定（晚绑定），这就需要虚函数：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">void</span> <span class="hljs-title">speak</span><span class="hljs-params">()</span> </span>&#123;  <br>    cout &lt;&lt; <span class="hljs-string">&quot;动物在说话&quot;</span> &lt;&lt; endl;  <br>&#125;<br></code></pre></td></tr></table></figure><p>在父类speak前加上virtual即可<br>上述则是动态多态的实现，可知有如下条件：</p><ol><li>有继承关系</li><li>子类要重写父类的虚函数<br>当函数要传入父类的指针或者引用，执行的是子类对象，就使用了动态多态。</li></ol><h6 id="虚函数的实现原理"><a href="#虚函数的实现原理" class="headerlink" title="虚函数的实现原理"></a>虚函数的实现原理</h6><p>当我们在Animal中把speak定义成virtual虚函数时，同时也产生了虚函数指针（vfptr）他指向一个虚函数表，表内存储着虚函数的地址。比如animal中虚函数指针的就指向Animal::speak。当我们定义了子类cat，它同时也继承了虚函数指针和虚函数表，之后我们在cat中重写了speak之后，cat的虚函数表中Cat::speak就覆盖了原有的Animal::speak。因为在main函数中，我们传入的对象是cat类，所以它只会在cat类的虚函数表中找speak函数。</p><h4 id="纯虚函数和抽象类："><a href="#纯虚函数和抽象类：" class="headerlink" title="纯虚函数和抽象类："></a>纯虚函数和抽象类：</h4><p>在编写虚函数时，通常父类中虚函数的实现时不会用到的，主要用到子类重写内容，所以可以将虚函数改为纯虚函数。<br>当类中有了纯虚函数，该类就称为抽象类<br>定义方式：<br>virtual void func（）&#x3D;0；<br>抽象类又有以下特点：</p><ol><li>不能实例化对象（本身就无意义）</li><li>抽象类的子类必须重写父类中的纯虚函数，否则也是抽象类</li></ol><h4 id="虚析构和纯虚析构"><a href="#虚析构和纯虚析构" class="headerlink" title="虚析构和纯虚析构"></a>虚析构和纯虚析构</h4><p>在使用多态时，子类中属性开辟到堆区，父类指针在释放时无法调用到子类的析构代码。（因为子类对象使用的是父类指针，当父类指针析构时，只能触发父类的析构函数）<br>当把父类的析构函数的定义为虚函数时，就解决了这个问题，父子的析构函数都可以被调用。    </p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">virtual</span> ~类名()&#123;&#125;<br></code></pre></td></tr></table></figure><p>如果设置成纯虚函数（纯虚析构），那么也要在类外对析构函数定义具体行为，因为父类中也可能有数据存入栈内。</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs 1c">virtual <span class="hljs-symbol">~类名()=0</span>;<br>类名<span class="hljs-punctuation">:</span><span class="hljs-punctuation">:</span><span class="hljs-symbol">~类名()&#123;&#125;</span><br></code></pre></td></tr></table></figure><h4 id="多态的好处"><a href="#多态的好处" class="headerlink" title="多态的好处"></a>多态的好处</h4><p>在日常情景中，提倡使用多态来编写代码，这样会让代码结构更清晰，添加功能和修改功能都更加方便。</p>]]></content>
    
    
    <categories>
      
      <category>c++</category>
      
    </categories>
    
    
    <tags>
      
      <tag>cs</tag>
      
      <tag>c++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Lecture 7 - Lists IV Arrays and Lists （链表总结）</title>
    <link href="/2025/05/29/Lecture%207/"/>
    <url>/2025/05/29/Lecture%207/</url>
    
    <content type="html"><![CDATA[<p>因为前面所创建的链表，也有一些问题，比如，在一个很大的链表中，我们想要找到中间项，无论从哪个方向入手，都是很麻烦的。而数组就很好的解决了这个问题，所以我们就通过创建数组来改善这个问题。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Array</span> &#123;  <br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span>[] array;  <br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> size;  <br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Array</span><span class="hljs-params">()</span>  <br>    &#123;  <br>        array = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">100</span>];  <br>        size=<span class="hljs-number">0</span>;  <br>    &#125;<br></code></pre></td></tr></table></figure><p>通过size来确定目前数组的长度，并进行一系列操作</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addlast</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span>  <br>    &#123;  <br>        <span class="hljs-keyword">if</span>(size&gt;=array.length)  <br>        &#123;  <br>            resize(array.length*<span class="hljs-number">2</span>);  <br>        &#125;  <br>        array[size]=n;  <br>        size++;  <br>    &#125;<span class="hljs-comment">//添加末尾项  </span><br><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">get</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>  <br>&#123;  <br>    <span class="hljs-keyword">return</span> array[i-<span class="hljs-number">1</span>];  <br>&#125;<span class="hljs-comment">//得到目标项  </span><br><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getlast</span><span class="hljs-params">()</span>  <br>&#123;  <br>    <span class="hljs-keyword">return</span> array[size-<span class="hljs-number">1</span>];  <br>&#125;<span class="hljs-comment">//得到末尾项  </span><br><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">removelast</span><span class="hljs-params">()</span>  <br>&#123;  <br>    <span class="hljs-type">int</span> temp=array[size-<span class="hljs-number">1</span>];  <br>    size--;  <br>    <span class="hljs-keyword">return</span> temp;  <br>&#125;<span class="hljs-comment">//去掉末尾项</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">resize</span><span class="hljs-params">(<span class="hljs-type">int</span> newSize)</span>  <br>&#123;  <br>    <span class="hljs-type">int</span>[] a = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[newSize];  <br>    System.arraycopy(array, <span class="hljs-number">0</span>, a, <span class="hljs-number">0</span>, array.length);  <br>    array=a;  <br>&#125;<span class="hljs-comment">//重新设置数组长度</span><br></code></pre></td></tr></table></figure><p>因为数组长度是固定的，一旦超过设定的初值，就不能再添加，所以采取的策略是设置一个更长的新数组（一般设置为旧数组长度两倍），将原有数据都复制过去，存储原数组地址变量也赋值为新数组地址。当然，这一步随数组长度增加是越来越慢的，所以这也是数组的一个缺点。</p><h2 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h2><p>共七次课，讲了链表与数组的构造以及相应的操作。这两种数据结构都是线性的存储结构，而存储方式也有不同。<br>数组就像是一栋大公寓，里面每一间屋子住着相应的数据，知道门牌号，就能迅速的找到屋里的人，带来的问题就是公寓住满后再想住人就相对困难，只能换大楼，再让原住民集体搬家。同时，想要对数组中间位置进行插入和删除比较麻烦，需要对后续所有项都操作，费时费力。<br>而链表存储的数据，仅相邻元素间存在关系，这种整体弱相关性就让链表对于中间位置的数据操作变得清晰简单，同时长度也可以随时变化。但带来的问题就是无法直接获得目标数据，需要一步一步找到，费时。</p>]]></content>
    
    
    <categories>
      
      <category>数据结构与算法</category>
      
      <category>CS61B</category>
      
    </categories>
    
    
    <tags>
      
      <tag>cs</tag>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Lecture 5-Lists 3 DLLists and Arrays</title>
    <link href="/2025/05/29/Lecture%205/"/>
    <url>/2025/05/29/Lecture%205/</url>
    
    <content type="html"><![CDATA[<p>观察上节课所写的单向链表结构，发现要得到最后一个结点需要遍历整个链表，这是很麻烦的，所以我们想要再建立一个类似头指针一样指向末尾的指针，帮助我们从末尾开始遍历。<br>这时我们发现，即便有了这个指针，他只能帮助我们得到最后一个结点，是不能向前访问的，所以我们就通过创建双向链表来解决。让每一个结点不仅存储下一个结点的位置，还保存上一个结点的位置。<br>这时，我们就能通过最后一个结点的指针来进行一系列操作。但是，就面临了设置头结点时相同的问题，假如链表是空的，还需要先判断再操作。这时候我们就有两种方法解决这个问题：</p><ol><li>建立两个哨兵，一个在最前方，一个在最后方。</li><li>只用一个哨兵，后面连接第一个结点，前面连接最后一个结点。（如果是空链表，前后都指向自己）<br>给出第二种链表的构造方式：</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">array</span> &#123;  <br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> size=<span class="hljs-number">1</span>;  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">IntNode</span>  <br>    &#123;  <br>        <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> item;  <br>        <span class="hljs-keyword">public</span> IntNode next;  <br>        <span class="hljs-keyword">public</span> IntNode prev;  <br>        <span class="hljs-keyword">public</span> <span class="hljs-title function_">IntNode</span><span class="hljs-params">(<span class="hljs-type">int</span> i, IntNode n, IntNode p)</span>  <br>        &#123;  <br>            item = i;  <br>            next = n;  <br>            prev = p;  <br>        &#125;  <br>    &#125;  <br>    <span class="hljs-keyword">public</span> IntNode first;  <br>    <span class="hljs-keyword">private</span> IntNode sentinel=<span class="hljs-keyword">new</span> <span class="hljs-title class_">IntNode</span>(<span class="hljs-number">0</span>,<span class="hljs-literal">null</span>,<span class="hljs-literal">null</span>);  <br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">array</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span>  <br>    &#123;  <br>        sentinel.next = <span class="hljs-keyword">new</span> <span class="hljs-title class_">IntNode</span>(n, <span class="hljs-literal">null</span>, sentinel);  <br>        sentinel.prev = sentinel.next;  <br>    &#125;  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span>  <span class="hljs-title function_">addarray</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span>  <br>    &#123;  <br>        IntNode n=<span class="hljs-keyword">new</span> <span class="hljs-title class_">IntNode</span>(x,sentinel.next,sentinel);  <br>        sentinel.next.prev = n;  <br>        sentinel.next = n;  <br>        size++;  <br>    &#125;  <br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getfirst</span><span class="hljs-params">()</span>  <br>    &#123;  <br>    <span class="hljs-keyword">return</span> sentinel.next.item;  <br>    &#125;  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addarraylast</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span>  <br>    &#123;  <br>        IntNode n=<span class="hljs-keyword">new</span> <span class="hljs-title class_">IntNode</span>(x,<span class="hljs-literal">null</span>,sentinel.prev);  <br>        sentinel.prev.next = n;  <br>        sentinel.prev = n;  <br>        size++;  <br>  <br>    &#125;  <br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-title function_">size</span><span class="hljs-params">(IntNode p)</span>  <br>    &#123;  <br>        <span class="hljs-type">int</span> <span class="hljs-variable">size</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;  <br>        <span class="hljs-type">IntNode</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> sentinel.next;  <br>        <span class="hljs-keyword">while</span>(temp != <span class="hljs-literal">null</span>)  <br>        &#123;  <br>            temp = temp.next;  <br>            size++;  <br>        &#125;  <br>        <span class="hljs-keyword">return</span> size;  <br>    &#125;  <br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">size</span><span class="hljs-params">()</span>  <br>    &#123;  <br>        <span class="hljs-keyword">return</span> size(sentinel.next);  <br>    &#125;  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">DLL</span><span class="hljs-params">(IntNode p)</span>  <br>    &#123;  <br>        <span class="hljs-keyword">while</span>(p!= <span class="hljs-literal">null</span>) &#123;  <br>            System.out.print(p.item+<span class="hljs-string">&quot; &quot;</span>);  <br>            p = p.next;  <br>        &#125;  <br>    &#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>数据结构与算法</category>
      
      <category>CS61B</category>
      
    </categories>
    
    
    <tags>
      
      <tag>cs</tag>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Lecture4-Lists II SLLists</title>
    <link href="/2025/05/26/Lecture%204/"/>
    <url>/2025/05/26/Lecture%204/</url>
    
    <content type="html"><![CDATA[<p>本节课主要学习了单链表的创建，以及对单链表的简单操作（java实现）<br>首先，为什么要创造链表这种数据结构？<br>个人认为，链表与数组很相似，但各有优缺点，这里只说链表的优点。就是链表的长度是可更改的，不会造成空间的浪费，这是数组不具有的。同时删除元素，增添元素等操作，链表也比数组更加容易。</p><hr><h2 id="1-SLLists的创建"><a href="#1-SLLists的创建" class="headerlink" title="1.SLLists的创建"></a>1.SLLists的创建</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">array</span> &#123;  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">IntNode</span>  <br>    &#123;  <br>        <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> item;  <span class="hljs-comment">//数据</span><br>        <span class="hljs-keyword">public</span> IntNode next;  <span class="hljs-comment">//与下一项的链接</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-title function_">IntNode</span><span class="hljs-params">(<span class="hljs-type">int</span> i, IntNode n)</span>  <br>        &#123;  <br>            item = i;  <br>            next = n;  <br>        &#125;  <span class="hljs-comment">//创建结点的方法</span><br>        <span class="hljs-keyword">public</span> IntNode first;<span class="hljs-comment">//头结点</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-title function_">array</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span>  <br>&#123;  <br>    first = <span class="hljs-keyword">new</span> <span class="hljs-title class_">IntNode</span>(n, <span class="hljs-literal">null</span>);  <br>&#125;<span class="hljs-comment">//初始化</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span>  <span class="hljs-title function_">addarray</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span>  <br>&#123;  <br>    first = <span class="hljs-keyword">new</span> <span class="hljs-title class_">IntNode</span>(x, first);  <br>&#125;<span class="hljs-comment">//头插法增加新节点</span><br>    &#125;<br></code></pre></td></tr></table></figure><h2 id="2-对SLLists的简单操作"><a href="#2-对SLLists的简单操作" class="headerlink" title="2. 对SLLists的简单操作"></a>2. 对SLLists的简单操作</h2><ol><li>获得头节点数据</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getfirst</span><span class="hljs-params">()</span>  <br>&#123;  <br><span class="hljs-keyword">return</span> first.item;  <br>&#125;<br></code></pre></td></tr></table></figure><ol start="2"><li>在链表末尾添加新节点</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addarraylast</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span>  <br>&#123;  <br>    <span class="hljs-type">IntNode</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> first;    <br>    <span class="hljs-keyword">while</span>(temp.next != <span class="hljs-literal">null</span>)  <br>        temp = temp.next;  <br>    temp.next = <span class="hljs-keyword">new</span> <span class="hljs-title class_">IntNode</span>(x, <span class="hljs-literal">null</span>);  <br>&#125;<br></code></pre></td></tr></table></figure><ol start="3"><li>获得链表长度（迭代和递归都可以实现）</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-title function_">size</span><span class="hljs-params">(IntNode p)</span>  <br>&#123;  <br>    <span class="hljs-type">int</span> <span class="hljs-variable">size</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;  <br>    <span class="hljs-type">IntNode</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> first;  <br>    <span class="hljs-keyword">while</span>(temp != <span class="hljs-literal">null</span>)  <br>    &#123;  <br>        temp = temp.next;  <br>        size++;  <br>    &#125;  <br>    <span class="hljs-keyword">return</span> size;  <br>&#125;  <br><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">size</span><span class="hljs-params">()</span>  <br>&#123;  <br>    <span class="hljs-keyword">return</span> size(first);  <br>&#125;<br></code></pre></td></tr></table></figure><p>当然，这个方法是很费时间的，需要遍历一遍链表。<br>也可以在创建链表是就定义size为1，每增加一个节点就令size++。利用一点点空间，换来更高的效率。<br>以上我们所有方法的实现，都是建立在first有意义的基础上。如果链表是空的，first&#x3D;null，那么我们也可以在每个方法前都先判断一下first是否有意义，但这会让代码变得臃肿，所以我们采取另一种方法。     </p><h2 id="3-哨兵sentinel"><a href="#3-哨兵sentinel" class="headerlink" title="3.哨兵sentinel"></a>3.哨兵sentinel</h2><p>就好像钢七连解散后许三多仍然坚持唱连歌一样，不管链表是不是空的，哨兵都存在。    </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> IntNode sentinel=<span class="hljs-keyword">new</span> <span class="hljs-title class_">IntNode</span>(<span class="hljs-number">0</span>,<span class="hljs-literal">null</span>);<span class="hljs-comment">//哨兵的数值随意</span><br></code></pre></td></tr></table></figure><p>然后，在方法中，把所有first改为sentinel.next即可，减少了代码的重复性。</p>]]></content>
    
    
    <categories>
      
      <category>数据结构与算法</category>
      
      <category>CS61B</category>
      
    </categories>
    
    
    <tags>
      
      <tag>cs</tag>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>5月19~25日总结</title>
    <link href="/2025/05/25/5%E6%9C%8819-25%E6%97%A5%E6%80%BB%E7%BB%93/"/>
    <url>/2025/05/25/5%E6%9C%8819-25%E6%97%A5%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<p>这一周也没干什么大事，不过有了很多感悟，感受到自己有很多问题，所以干脆都写到总结里。</p><p>这周六的江苏省高数竞赛，近似于裸考，考前看了看往年的卷子，考前一天甚至玩到半夜，第二天早上直接去考了，感觉很奇怪，现在学的曲线，曲面积分做的很吃力，反而是上学期学的做的还不错，希望能得个奖吧（要是能得省一就好了，有奖金）</p><p>然后也明确了健身计划，采取三分化的方式（健身饮食计划也传到了我的博客上）。目前除了晚上饿，还能接受。</p><p>目前这周就干了这么几件大事，其他就是一些正常学习进度的推进了。接下来写一点我更想写的感悟：</p><p>我时常反思自己为什么上了一直憧憬的大学之后，干劲没有那么足了呢？</p><p>关于这点我想了很多原因，但是最重要的分为两点。其一，大学对自己水平的检验强度低，一个学期的考试次数还没初高中一个月多，对自己掌握程度并不了解，压力比较小，考试就暴露问题。其二，观念问题，我一直觉得，观念会直接影响行为，在我的潜意识中，虚度大学时光是正常的，身边人也都在这么做，所以也不会有所察觉，只有在睡前回顾自己的一天时，伴着空虚入睡。当然我也并不觉得虚度是完全错误的，凡事掌握一个度。</p><p>我总是在选择面前，不能明确自己的目的</p><p>这是在我指定健身计划中发现的问题，我一直没明确是要减脂还是增肌，所以去了健身房也是一通乱练，事倍功半。学业也是，一直在卷绩点和放弃之间徘徊，感觉这学期绩点是快要崩了，也就不用选择了。学习也是，总是在不同的方法，内容之间迂回，结果就是什么也没完成。</p><p>目光太狭隘，只能看到明天，我希望能够看的更远。</p><p>这一点也牵扯到peer pressure，因为目光太狭隘，只能看到自己的同学，和他们竞争，怕被超过怕超不过，在内卷的裹挟下越陷越深，其实眼光放长远，比自己强的人数不胜数，一个个去比，没有任何意义，能够让自己不断进步，就是完全的胜利。因为目光太狭隘，太在意眼前的得失，如果将眼光放远，其实会少很多烦恼，也会有更多的希望与动力。</p><p>接下来一周，要明确自己的方向，不仅是现在的，也要想想未来自己真正想做什么。</p>]]></content>
    
    
    <categories>
      
      <category>总结</category>
      
    </categories>
    
    
    <tags>
      
      <tag>日常</tag>
      
      <tag>大学生活</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Lecture3-Lists I References Recursion and no Lists</title>
    <link href="/2025/05/25/Lecture%203(no%20lists)/"/>
    <url>/2025/05/25/Lecture%203(no%20lists)/</url>
    
    <content type="html"><![CDATA[<p>延用上次课的Dog类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Dog</span> &#123;  <br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> weight;  <br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Dog</span><span class="hljs-params">(<span class="hljs-type">int</span> w)</span>  <br>    &#123;  <br>        weight=w;  <br>    &#125;<br>    <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;  <br>    <span class="hljs-type">Dog</span> <span class="hljs-variable">dog1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Dog</span>(<span class="hljs-number">1</span>);  <br>    <span class="hljs-type">Dog</span> <span class="hljs-variable">dog2</span> <span class="hljs-operator">=</span> dog1;  <br>    dog2.weight=<span class="hljs-number">100</span>;  <br>    System.out.println(dog1.weight);  <br>    System.out.println(dog2.weight);<br></code></pre></td></tr></table></figure><p>代码含义为，创建dog1并将体重设置成100，在创建dog2，并把dog1赋值给dog2，并将dog2的体重改为100，分别输出两只狗的体重。<br>运行后发现，两只狗的体重都变成了100，这是为什么？<br>原来，当我们设置一个新的dog1时，计算机会用一块内存来存储dog1的相应数据（比如weight的大小），但是计算机的内存是很大的，下次用的时候怎么知道他在哪呢？<br>我们用对象名dog1来存储其数据的位置，就像是埋宝藏，weight就是被埋的宝藏而dog1则是宝藏上的牌子，告诉我们weight在这里，能够快速找到。<br>那么dog2&#x3D;dog1，其实并没有新创建一只狗，dog2只是存储了dog1的位置，而改变dog2的体重，就是改变dog2位置的那只狗的体重，所以dog1，dog2的weight都变为100。<br><em>注意，只有引用类型有这个特征，像int、double这样的数据类型，重复上述操作就是重新创建了一个区域来存储数值，改变其中一个另一个不受影响。</em></p>]]></content>
    
    
    <categories>
      
      <category>数据结构与算法</category>
      
      <category>CS61B</category>
      
    </categories>
    
    
    <tags>
      
      <tag>cs</tag>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Lecture2-Defining and Using Classes</title>
    <link href="/2025/05/25/Lecture%202/"/>
    <url>/2025/05/25/Lecture%202/</url>
    
    <content type="html"><![CDATA[<p>本节课主要讲了java中静态方法(static)和非静态方法(non-static)的区别，和相应的使用方式。<br>以类Dog为例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Dog</span> &#123; <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">makenoise</span><span class="hljs-params">()</span><br>    &#123;<br>     System.out.println(<span class="hljs-string">&quot;bark!!&quot;</span>);<br>    &#125; <br>&#125;<br></code></pre></td></tr></table></figure><p>我们定义了一个makenoise方法，其中的狗只能bark的叫，显然不符合现实，我们知道，狗的叫声是由狗的体重决定的（假设），所以想要在Dog类中，加入特征weight，根据其大小判断具体的叫声。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Dog</span> &#123;  <br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> weight;  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">makeNoise</span><span class="hljs-params">()</span> &#123;  <br>        <span class="hljs-keyword">if</span>(weight&lt;<span class="hljs-number">10</span>)  <br>            System.out.println(<span class="hljs-string">&quot;yipyip!!!&quot;</span>);  <br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(weight &lt;<span class="hljs-number">30</span>) &#123;  <br>            System.out.println(<span class="hljs-string">&quot;bark!!!&quot;</span>);  <br>        &#125;  <br>        <span class="hljs-keyword">else</span>&#123;  <br>            System.out.println(<span class="hljs-string">&quot;arooo!!!&quot;</span>);  <br>        &#125;  <br>    &#125;  <br>&#125;<br></code></pre></td></tr></table></figure><p>通过对比，发现在定义方法时有static会报错，为什么？<br>因为要使用的weight为非静态变量，而静态方法无法调用非静态变量，所以去掉了static。<br>此时我们再调用makenoise方法，发现还是失败的。<br>这又是为什么？<br>因为非静态的方法需要在实例下才能调用，而静态方法则无需实例，可以直接调用<br>可以理解为，静态方法是所有狗的特征，所以我无需代入具体的狗，而非静态的方法是具体的狗的特征，需要一个实例才能使用。<br>接下来将用两种不同形式去表示两只狗哪只的体重较大：    </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Dog <span class="hljs-title function_">Maxweights</span><span class="hljs-params">(Dog d, Dog d1)</span>  <br>&#123;  <br>    <span class="hljs-keyword">if</span>(d.weight&gt;=d1.weight)  <br>        <span class="hljs-keyword">return</span> d;  <br>    <span class="hljs-keyword">else</span>  <br>        <span class="hljs-keyword">return</span> d1;  <br>&#125;<br></code></pre></td></tr></table></figure><p>此方法指取两只狗进行比较，再看非静态方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Dog <span class="hljs-title function_">Maxweights</span><span class="hljs-params">(Dog d, Dog d1)</span>  <br>&#123;  <br>    <span class="hljs-keyword">if</span>(d.weight&gt;=d1.weight)  <br>        <span class="hljs-keyword">return</span> d;  <br>    <span class="hljs-keyword">else</span>  <br>        <span class="hljs-keyword">return</span> d1;  <br>&#125;<br></code></pre></td></tr></table></figure><p>这代表了赋予一个具体狗与其他狗比大小的能力，并返回体重较大者。</p>]]></content>
    
    
    <categories>
      
      <category>数据结构与算法</category>
      
      <category>CS61B</category>
      
    </categories>
    
    
    <tags>
      
      <tag>cs</tag>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Lecture 1-introduction</title>
    <link href="/2025/05/25/Lecture%201/"/>
    <url>/2025/05/25/Lecture%201/</url>
    
    <content type="html"><![CDATA[<h2 id="java的介绍："><a href="#java的介绍：" class="headerlink" title="java的介绍："></a>java的介绍：</h2><p>Java是一种面向对象的编程语言,可知有“类”，“方法”等重要概念，所以编写的代码都要存在一个类中,同时类中，也需要方法，才能正常运行。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HelloWorld</span><span class="hljs-comment">//类</span><br>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span><br>    &#123;<br>    &#125; <br>&#125;<br></code></pre></td></tr></table></figure><p>java中的print：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">System.out.println(<span class="hljs-string">&quot;Hello World&quot;</span>);<br></code></pre></td></tr></table></figure><p>其余定义变量，if-else，for循环与c类似。<br>其中，在java中建立一个新方法（创建新函数）需要在类中进行，同样有返回值和返回数据类型。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">larger</span><span class="hljs-params">(x,y)</span><br>&#123;<br><span class="hljs-keyword">if</span>(x&gt;y)<br><span class="hljs-keyword">return</span> x;<br><span class="hljs-keyword">else</span> <br><span class="hljs-keyword">return</span> y;<br>&#125;<br></code></pre></td></tr></table></figure><p>java具有模块化的优点，模块之间互不影响<br>实现类car的定义：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Car</span> &#123;  <br>    String name;  <br>    <span class="hljs-type">int</span> wheels=<span class="hljs-number">4</span>;  <br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Car</span><span class="hljs-params">(String name)</span>  <br>    &#123;  <br>        <span class="hljs-built_in">this</span>.name=name;  <br>        <span class="hljs-built_in">this</span>.wheels=<span class="hljs-number">4</span>;  <br>    &#125;  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">drive</span><span class="hljs-params">()</span>  <br>    &#123;  <br>        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">this</span>.wheels&lt;<span class="hljs-number">4</span>)  <br>            System.out.println(<span class="hljs-built_in">this</span>.name+<span class="hljs-string">&quot;what?the car is died&quot;</span>);  <br>        <span class="hljs-keyword">else</span>  <br>            System.out.println(<span class="hljs-built_in">this</span>.name+<span class="hljs-string">&quot;wow,what a fast car!&quot;</span>);  <br>    &#125;  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">driveinhole</span><span class="hljs-params">()</span>  <br>    &#123;  <br>        <span class="hljs-built_in">this</span>.wheels--;  <br>        System.out.println(<span class="hljs-built_in">this</span>.name+<span class="hljs-string">&quot;&#x27;s something lost&quot;</span>);  <br>    &#125;  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>  <br>    &#123;  <br>        <span class="hljs-type">Car</span> <span class="hljs-variable">car1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Car</span>(<span class="hljs-string">&quot;lalala&quot;</span>);  <br>        car1.drive();  <br>        car1.driveinhole();  <br>        car1.drive();  <br>    &#125;  <br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>数据结构与算法</category>
      
      <category>CS61B</category>
      
    </categories>
    
    
    <tags>
      
      <tag>cs</tag>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>健身小白饮食运动计划</title>
    <link href="/2025/05/25/%E5%81%A5%E8%BA%AB%E5%B0%8F%E7%99%BD%E9%A5%AE%E9%A3%9F%E8%BF%90%E5%8A%A8%E8%AE%A1%E5%88%92/"/>
    <url>/2025/05/25/%E5%81%A5%E8%BA%AB%E5%B0%8F%E7%99%BD%E9%A5%AE%E9%A3%9F%E8%BF%90%E5%8A%A8%E8%AE%A1%E5%88%92/</url>
    
    <content type="html"><![CDATA[<h1 id="健身计划"><a href="#健身计划" class="headerlink" title="健身计划"></a>健身计划</h1><h2 id="基础信息"><a href="#基础信息" class="headerlink" title="基础信息"></a>基础信息</h2><p>身高180cm，体重76.7kg。<br><strong>基础代谢率 (BMR)</strong>: 约 1802 卡路里&#x2F;天<br><strong>每日总能量消耗 (TDEE)</strong>: 约 3108 卡路里&#x2F;天（活动较多）</p><h2 id="计划"><a href="#计划" class="headerlink" title="计划"></a>计划</h2><p><em><strong>饮食</strong></em>：要在吃够基础代谢的基础上，制造热量缺口，同时要保证蛋白质的足够摄入。    </p><ol><li>早饭：咖啡一杯，全麦面包两片，鸡蛋三个（一个全蛋，两个蛋清）</li><li>午饭:   食堂打饭一份菜、一份肉，加一碗米饭。每周六午饭放纵</li><li>晚饭：鸡胸肉+荞麦面+香蕉一根</li></ol><hr><p><em><strong>运动</strong></em>：采用三分化，四天为一循环 （每天+30min椭圆机）<br>Day1：</p><ol><li>背：高位下拉   坐姿钢线划船 杠铃划船  3组</li><li>二头：龙门架弯举  龙门架单臂二头  杠铃弯举 3组</li><li>肩后束：龙门架绳索面拉</li></ol><hr><p>Day2：</p><ol><li>胸：坐姿器械推胸  蝴蝶机  龙门架夹胸</li><li>肩前束：杠铃推举  龙门架侧平举&#x2F;提拉</li><li>肱三头：龙门架绳索臂屈伸  绳索过顶臂屈伸  直杆下压</li></ol><hr><p>Day3：</p><ol><li>腿：自由深蹲  器械腿弯举  </li><li>腹：平板卷腹  悬垂举腿  坐姿卷腹</li></ol>]]></content>
    
    
    <categories>
      
      <category>生活</category>
      
      <category>健身</category>
      
    </categories>
    
    
    <tags>
      
      <tag>健身</tag>
      
      <tag>减肥</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World55</title>
    <link href="/2025/05/18/hello-world/"/>
    <url>/2025/05/18/hello-world/</url>
    
    <content type="html"><![CDATA[<p>这是一个测试文档，看看效果</p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
